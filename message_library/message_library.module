<?php
/**
 * @file
 * Code for the Message Libarary feature.
 */
include_once 'message_library.features.inc';

/**
 * Implements hook_init()
 */
function message_library_init() {

}

/**
 * Implements hook_flush_caches()
 */
function message_library_flush_caches() {
  // Add an workaround here, so that the menu entry is set properly
  if (!message_library_check_menu_entries()) {
    message_library_set_up_menu_links();
  }
}

/**
 * Implements hook_modules_enabled()
 */
function message_library_modules_enabled($modules) {
  if (in_array('message_library', $modules)) {
    message_library_prepopulate_themes_terms();
    message_library_set_up_menu_links();
  }
}

/**
 * Implementation of hook_form_alter()
 *
 * Change the default placeholders for the (-Any-) options on the exposed filter
 */
function message_library_form_alter(&$form, $form_state, $form_id) {
  if(!empty($form_state['view']) && $form_state['view']->name == 'message_library') {
    // overrides <All> on the dropdown
    if (!empty($form['target_audience']['#options'])) {
      $form['target_audience']['#options']['All'] = t('<All target Audience>');
    }
    if (!empty($form['at_risk_group']['#options'])) {
      $form['at_risk_group']['#options']['All'] = t('<All groups>');
    }
    if (!empty($form['issue']['#options'])) {
      $form['issue']['#options']['All'] = t('<All issues>');
    }
    if (!empty($form['threat']['#options'])) {
      $form['threat']['#options']['All'] = t('<All threats>');
    }

    $form['ml_search_text']['#attributes'] = array('class' => array('ctools-auto-submit-exclude'));
  }
}

/**
 * Implements hook_menu().
 *
 * Creates a 'Message Library' section on the administration page
 */
function message_library_menu() {
  $items['admin/config/message_library'] = array(
    'title' => 'Message Library',
    'description' => 'Settings for the Message Library.',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_views_pre_execute()
 */
function message_library_views_pre_execute(&$view) {
  return;
  // @todo: it's will be good when the Solr sever is not accessible, or the
  // message_library_index not available, it still can work gracefully.
  $solr_server = search_api_server_load('solr_server');
  if ((!empty($solr_server)) && ($solr_server instanceof SearchApiServer)) {
    $solr_service = new SearchApiSolrService($solr_server);

    if (!$solr_service->ping()) {
      //
    }
  }
}

/**
 * Implements hook_page_alter()
 */
function message_library_page_alter(&$page) {
  // Set breadcrumb for the Message Library
  if (current_path() == 'message-library') {
    drupal_set_breadcrumb(array(
      l('Home', '<front>'),
      l('Resources', 'resources'),
      l('Communication Tools', 'resources/communication-tools'),
    ));
  }

  // Set breadcrumb for the TOU page
  if (current_path() == 'message-library-cgi') {
    drupal_set_breadcrumb(array(
      l('Home', '<front>'),
      l('Resources', 'resources'),
      l('Communication Tools', 'resources/communication-tools'),
      l('Message Library', 'message-library'),
    ));
  }

  $view = views_get_page_view();
  if (!empty($view) && !empty($view->name) && $view->name == 'messsage_library_threat') {
    drupal_set_breadcrumb(array(
      l('Home', '<front>'),
      l('Resources', 'resources'),
      l('Communication Tools', 'resources/communication-tools'),
      l('Message Library', 'message-library'),
    ));
  }
}

/**
 * Implements hook_menu_breadcrumb_alter()
 */
function message_library_menu_breadcrumb_alter(&$active_trail, $item) {
  // @xxx: Why it doesn't work?
}
/**
 * Get all the threat terms under an issue
 * @return An array of all the threat tids
 */
function message_library_get_threat_by_issue($tid) {
  $terms = array();

  // Get all the sub-terms of this term
  $tids = array($tid);
  $vocab = taxonomy_vocabulary_machine_name_load('issues');
  if (!empty($vocab->vid)) {
    $vid = $vocab->vid;

    $items = taxonomy_get_tree($vid, $tid);
    if (!empty($items)) {
      foreach ($items as $item) {
        if (empty($item->tid)) continue;
        $tids[] = $item->tid;
      }
    }
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'threat')
    ->fieldCondition('field_threat_category', 'tid', $tids, 'IN');
  $result = $query->execute();

  if (!empty($result) && !empty($result['taxonomy_term'])) {
    $terms = array_keys($result['taxonomy_term']);
  }

  return $terms;
}

/**
 * Get all of the messages under a threat
 *
 * @return A collection of the nde ids of the messages
 */
function message_library_get_messages_by_threat_tid($tid) {
  $nids = array();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'message')
    ->fieldCondition('field_message_threat', 'tid', $tid)
    ->execute();

  if (!empty($result) && !empty($result['node'])) {
    $nids = array_keys($result['node']);
    if (!empty($nids)) {
      $nids = array_unique($nids);
    }
  }

  return $nids;
}

/**
 * Implements hook_pathauto()
 */
function message_library_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'message_library';
      $settings['token_type'] = 'term';
      $settings['groupheader'] = t('Message library paths');
      $settings['patterndescr'] = t('Default path pattern (applies to all Message Library threat terms).');
      $settings['patterndefault'] = 'message-library/threat/[term:name]';
      $settings['batch_update_callback'] = 'message_library_pathauto_bulk_update_batch_process';

      // Threat
      $settings['patternitems']['ml_threat'] = t('Pattern for all Message Library threat terms.');
      // Message
      $settings['patternitems']['ml_message'] = t('Pattern for all Message Library message nodes.');

      return (object) $settings;
    default:
      break;
  }
}

/**
 * Implements hook_path_alias_types()
 *
 * Used primarily by the bulk delete form.
 */
function message_library_path_alias_types() {
  $objects['message-library/threat/'] = t("Message library threat terms");
  return $objects;
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function message_library_taxonomy_term_insert($term) {
  if (message_library_is_threat_term($term)) {
    message_library_threat_term_update_alias($term, 'insert');
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function message_library_taxonomy_term_update($term) {
  if (message_library_is_threat_term($term)) {
    message_library_threat_term_update_alias($term, 'update');
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function message_library_taxonomy_term_delete($term) {
  if (message_library_is_threat_term($term)) {
    $source = 'message-library/threat/' . $term->tid;
    pathauto_path_delete_all($source);
  }
}

/**
 * Callback for creating proper alias for threat page
 */
function message_library_threat_term_update_alias(stdClass $term, $op, array $options = array()) {
  $module = 'message_library';
  $source = 'message-library/threat/' . $term->tid;
  module_load_include('inc', 'pathauto');
  $alias = pathauto_create_alias($module, $op, $source, array('term' => $term), 'ml_threat');

  // if (!empty($alias)) {
  //   drupal_set_message(t('Alias created for term :term : :alias.', array(':term' => $term->name, ':alias' => $alias)));
  // }
  // else {
  //   drupal_set_message(t('Failed to create alias for term :term.', array(':term' => $term->name)), 'error');
  // }
}

/**
 * Check whehter a term belongs to vocabulary 'Threat'
 */
function message_library_is_threat_term($term) {
  if (!is_object($term) && is_numeric($term)) {
    $term = taxonomy_term_load($term);
  }
  $threat_vocab = taxonomy_vocabulary_machine_name_load('threat');
  if (!empty($threat_vocab->vid) && !empty($term->vid) && $threat_vocab->vid == $term->vid) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Batch processing callback; Generate aliases for message library content.
 */
function message_library_pathauto_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }

  $threat_tids = array();
  $threat_vocab = taxonomy_vocabulary_machine_name_load('threat');
  if (!empty($threat_vocab->vid)) {
    $terms = taxonomy_get_tree($threat_vocab->vid);
    if (!empty($terms)) {
      foreach ($terms as $term) {
        if (!empty($term->tid)) {
          $threat_tids[] = $term->tid;
        }
      }
    }
  }

  if (!empty($threat_tids)) {
    $context['sandbox']['total'] = count($threat_tids);
  }
  else {
    $context['finished'] = 1;
    return;
  }

  message_library_threat_term_update_alias_mutiple($threat_tids, 'bulkupdate');
  $context['sandbox']['count'] += count($threat_tids);
  $context['sandbox']['current'] = max($threat_tids);
  $context['message'] = t('Updated alias for term @tid.', array('@tid' => end($threat_tids)));

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}

/**
 * Update the URL aliases for multiple threat terms
 */
function message_library_threat_term_update_alias_mutiple(array $tids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $terms = taxonomy_term_load_multiple($tids);
  foreach ($terms as $term) {
    message_library_threat_term_update_alias($term, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($tids), 'Updated URL alias for 1 threat term.', 'Updated URL aliases for @count threat terms.'));
  }
}

/**
 * Setting up the necessary menu links for the message library
 */
function message_library_set_up_menu_links() {
  $resource_link = message_library_get_menu_link_resources();

  if (!empty($resource_link)) {
    // Create a link that points to the node 'Communication Tools'
    $node = message_library_ensure_communication_tools_page();

    if (!empty($node)) {
      $link_title = 'Communication Tools';
      $link_path = 'resources/communication-tools';
      // Rinse
      $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path AND link_title = :link_title", array(':link_path' => $link_path, ':link_title' => $link_title));
      foreach ($result as $link) {
        _menu_delete_item($link);
      }
      // Repeat
      $com_tools_link = array(
        'link_path' => $link_path,
        'link_title' => $link_title,
        'menu_name' => 'main-menu',
        'plid' => $resource_link['mlid'],
      );
      menu_link_save($com_tools_link);

      // Create a menu link 'Message Library' under 'Communication Tools'
      if (!empty($com_tools_link['mlid'])) {
        $link_title = 'Message Library';
        $link_path = 'message-library';
        // Rinse
        $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path AND link_title = :link_title", array(':link_path' => $link_path, ':link_title' => $link_title));
        foreach ($result as $link) {
          _menu_delete_item($link);
        }
        // Repeat
        $ml_link = array(
          'link_path' => $link_path,
          'link_title' => $link_title,
          'menu_name' => 'main-menu',
          'plid' => $com_tools_link['mlid'],
          'router_path' => 'message-library',
        );
        if (!menu_link_save($ml_link, array(), $com_tools_link)) {
          watchdog('message_library', 'Failed to create the menu link for Message Library.');
        }
      }
      else {
        watchdog('message_library', "Can\'t create menu links for Message Library, parent menu link not found.", WATCHDOG_WARNING);
      }
    }
    else {
      watchdog('message_library', "Can\'t create menu links for Comminication Tools, the page for it doesn\'t exist.", WATCHDOG_WARNING);
    }
  }
  else {
    watchdog('message_library', "Can\'t create menu links for Message Library, parent menu link Resources is not found.", WATCHDOG_WARNING);
  }
}

/**
 * Prepopulating some necessary terms under 'Themes'
 */
function message_library_prepopulate_themes_terms() {
  // Prepopulate a new term 'Localized messaging material' under vocabulary
  // 'Themes'
  // @see: http://atrium.wiredcraft.com/internews/node/4749#comment-6593
  $vocab_themes = taxonomy_vocabulary_machine_name_load('themes');
  if (!empty($vocab_themes->vid)) {

    $term_name = 'Localized messaging material';
    $result = db_select('taxonomy_term_data', 'td')
      ->fields('td', array('tid', 'name'))
      ->condition('name', $term_name)
      ->condition('vid', $vocab_themes->vid)
      ->execute()
      ->fetchObject();

    if (empty($result)) {
      // New term - 'Communication material'
      $term = new stdClass();
      $term->name = $term_name;
      $term->vid = $vocab_themes->vid;
      taxonomy_term_save($term);
    }
  }
}

/**
 * Helper function - Ensure a node for menu link 'Communication Tool' exist
 *
 * @return The object of the node created or found in the system.
 */
function message_library_ensure_communication_tools_page() {
  // First check whether the noe(page) 'Communication Tools' already exists,
  // create a new one if not existed; reuse if existed already.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('title', 'Communication Tools')
    ->propertyCondition('type', 'page')
    ->execute();

  $node_existed = !empty($result['node']);
  // if (!empty($result['node'])) {
  //   node_delete_multiple(array_keys($result['node']));
  // }

  if (!$node_existed) {
    $node = new stdClass();
    $node->uid = 1;
    $node->status = 1;
    $node->title = 'Communication Tools';
    $node->type = 'page';
    $node->language = 'und';
    $node->body['und'][0]['value'] = '<p><strong>Message Library</strong></p><p>Welcome to the message library. This is an online searchable database of messages that acts as a reference for those wanting to disseminate critical information to affected populations in an emergency.It has been developed in collaboration with a number of different clusters/sectors in humanitarian response including Health, Water, Sanitation and Hygiene (WASH), Nutrition, Food Security, Protection (Child Protection, Gender-based Violence, Mine Risk Education), Education and Camp Coordination Camp Management. The message library can be used both as a disaster preparedness tool and following the outbreak of an emergency. If used in the correct way, the library should help improve communication with crisis-affected populations.&nbsp;</p><p><a href="./message-library">Click here </a>to access the message library and associated guidance.</p>';
    $node->body['und'][0]['format'] = 'filtered_html';
    $node->path = array(
      'alias' => 'resources/communication-tools',
      // Disable pathauto for this page
      'pathauto' => '',
    );
    node_save($node);
  }
  else {
    // Get the node nid
    $nid = reset($result['node'])->nid;
    $node = node_load($nid);

    // Check if the path alias is properly set, set it if missing
    $path = path_load(array(
      'alias' => 'resources/communication-tools',
      'source' => 'node/' . $node->nid,
    ));
    if (empty($path)) {
      // Delete all aliases associated with this node.
      path_delete(array('source' => 'node/' . $node->nid));

      $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => 'resources/communication-tools',
      );
      path_save($path);
    }
  }

  return !empty($node->nid) ? $node : NULL;
}

/**
 * Get the menu link - 'Resources'
 */
function message_library_get_menu_link_resources() {
  $main_menu_links = menu_load_links('main-menu');
  $resource_link = array();
  foreach ($main_menu_links as $link) {
    if ($link['link_title'] == 'Resources') {
      $resource_link = $link;
      break;
    }
  }

  return $resource_link;
}

/**
 * A helper function to check whether the menu entries is set correctly
 *
 * @return TRUE if everything is working well, or FALSE if it's not
 */
function message_library_check_menu_entries() {
  // Menu link - Commnication Tools
  $link_title = 'Communication Tools';
  $link_path = 'resources/communication-tools';
  $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path AND link_title = :link_title", array(':link_path' => $link_path, ':link_title' => $link_title))->fetchAll();
  $communication_tools_link = reset($result);

  // Menu link - Message Library
  $link_path = 'message-library';
  $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => $link_path))->fetchAll();
  $message_library_link = reset($result);

  // Both menu entries should exist and the 'Message Library' menu link should
  // be created under the menu link 'Commnication Tools'
  if (!empty($communication_tools_link) && !empty($message_library_link) &&
    $message_library_link->plid == $communication_tools_link->mlid) {
    return TRUE;
  }

  return FALSE;
}
