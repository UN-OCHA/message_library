<?php
/**
 * @file
 */

include_once 'message_library_importer.features.inc';

/**
 * Implements hook_feeds_processor_targets_alter()
 */
function message_library_importer_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  return;
  if ($entity_type == 'node' && $bundle_name == 'message') {
    foreach(field_info_instances($entity_type, $bundle_name) as $name => $instance) {

      // Attach then fields on the threat term
      $info = field_info_field($name);
      $threat_info = field_info_instances('taxonomy_term', 'threat');

      foreach ($threat_info as $name => $instance) {
        $info = field_info_field($name);
        if ($info['type'] == 'taxonomy_term_reference') {
          $targets[$name] = array(
            'name' => 'Threat Â» ' . check_plain($instance['label']),
            'callback' => 'taxonomy_feeds_set_target',
            'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_feeds_after_parse()
 *
 * Invoked after a feed source has been parsed, before it will be processed.
 */
function message_library_importer_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
}

/**
 * Implemements hook_feeds_presave()
 */
function message_library_importer_feeds_presave(FeedsSource $source, $entity, $item) {
}

function message_library_importer_feeds_set_target_file($source, $entity, $target, $value) {
  return;
  if (empty($value)) {
    return;
  }
  module_load_include('inc', 'file');

  // Make sure $value is an array of objects of type FeedsEnclosure.
  if (!is_array($value)) {
    $all = explode('|', $value);
    $value = explode(';', $all[0]);
    if (isset($all[1])) {
      $titles = explode(";", $all[1]);
    }
  }
  foreach ($value as $k => $v) {
    if (!($v instanceof FeedsEnclosure)) {
      if (is_string($v)) {
        $value[$k] = new FeedsEnclosure($v, 'application/octet-stream');
      }
      else {
        unset($value[$k]);
      }
    }
  }
  if (empty($value)) {
    return;
  }

  // Determine file destination.
  // @todo This needs review and debugging.
  list($entity_id, $vid, $bundle_name) = entity_extract_ids($entity->feeds_item->entity_type, $entity);
  $instance_info = field_info_instance($entity->feeds_item->entity_type, $target, $bundle_name);
  $info = field_info_field($target);
  $data = array();
  if (!empty($entity->uid)) {
    $data[$entity->feeds_item->entity_type] = $entity;
  }
  $destination = file_field_widget_uri($info, $instance_info, $data);

  // Populate entity.
  $i = 0;
  $field = isset($entity->$target) ? $entity->$target : array();
  foreach ($value as $v) {
    if ($file = $v->getFile($destination)) {
      $field['und'][$i] = (array)$file;
      if (isset($titles[$i]) && $titles[$i] != '') {
        $field['und'][$i]['description'] = $titles[$i];
      }
      $field['und'][$i]['display'] = 1; // @todo: Figure out how to properly populate this field.
      if ($info['cardinality'] == 1) {
        break;
      }
      $i++;
    }
  }
  $entity->{$target} = $field;
}

function message_library_importer_feeds_set_target_link_url($source, $entity, $target, $value) {
  list($key, $subkey) = explode(':', $target, 2);

  // hack a bit...
  $instance_info = field_info_instance('node', $key, 'message');
  $info = field_info_field($key);

  // let's go
  if (!empty($value)) {
    $all = explode('|', $value);
    $value = explode(';', $all[0]);
    if (isset($all[1])) {
      $titles = explode(";", $all[1]);
    }
  }

  $i = 0;
  $field = isset($entity->{$key}) ? $entity->{$key} : array();
  foreach ($value as $v) {
    $field['und'][$i]['url'] = $v;
    if (isset($titles[$i]) && $titles[$i] != '') {
      $field['und'][$i]['title'] = $titles[$i];
    }
    $field['und'][$i]['attributes'] = array();
    $i++;
  }

  $entity->{$key} = $field;
}
