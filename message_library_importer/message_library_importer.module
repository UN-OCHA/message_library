<?php
/**
 * @file
 */

include_once 'message_library_importer.features.inc';

/**
 * Implements hook_cron()
 */
function message_library_importer_cron() {
  // Fix for sometimes the scheduler sometimes get lost.
  job_scheduler_rebuild_scheduler('job_scheduler_trigger');
}

/**
 * Implements hook_menu()
 */
function message_library_importer_menu() {
  $items['admin/config/message_library/importer'] = array(
    'title' => 'Feeds Importer',
    'description' => 'Configuration on the Feeds importer for Message Library',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_library_importer_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'message_library_importer.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_action_info()
 */
function message_library_importer_action_info() {
  return array(
    'message_library_importer_message_library_import_action' => array(
      'type' => 'job_scheduler',
      'label' => t('Message Library Import'),
      'configurable' => FALSE,
      'triggers' => array(
        'job_scheduler_message_library',
      ),
    ),
  );
}

/**
 * Action callback for import the message library.
 * This is to be used by the trigger set up by the 'job_scheduler'.
 */
function message_library_importer_message_library_import_action($object, $context) {
  __drush_print("\n===== Message Library Import =====");

  // The importing order of feeds importers.
  $importer_ids = array(
    'message_library_term_hazard',
    'message_library_term_issues',
    'message_library_term_sector',

    'message_library_term_threat',
    'message_library_term_information_type',
    'message_library_term_at_risk_group',
    'message_library_term_target_audience',

    'message_library_node_message',
  );

  /* Pre-import check
   * ------------------------------------------------------------------------ */
  // Ensure every importer has a valid path set for the HTTP fetcher.
  $import_paths = variable_get('ml_importer_import_paths', array());
  foreach ($importer_ids as $id) {
    if (empty($import_paths[$id]) || !feeds_valid_url($import_paths[$id])) {
      watchdog('message_library_importer', t('No import path for feeds importer !id', array('!id' => $id)));
      return FALSE;
    }
  }

  /* Import the feeds.
   * ------------------------------------------------------------------------ */
  $t_start = microtime(TRUE);
  $step = 1;
  foreach ($importer_ids as $importer_id) {
    $feeds_source = feeds_source($importer_id);

    $config = $feeds_source->getConfig();
    $config['FeedsHTTPFetcher']['source'] = $import_paths[$importer_id];
    $feeds_source->setConfig($config);
    $feeds_source->save();

    if (!empty($feeds_source)
      && is_a($feeds_source, 'FeedsSource')
      && ($feeds_source_config = $feeds_source->getConfig())
      && !empty($feeds_source_config['FeedsHTTPFetcher'])
      && !empty($feeds_source_config['FeedsHTTPFetcher']['source'])
      && feeds_valid_url($feeds_source_config['FeedsHTTPFetcher']['source'])) {

      $importer_info = message_library_importer_get_importer_info($feeds_source);
      __drush_log(t('!i. Importing !name !type', array('!name' => $importer_info['name'], '!type' => $importer_info['type'], '!i' => $step++)) . 's', 'status');
      do {
        $state = $feeds_source->import();
        __drush_log('   ' . round($state * 100) . '%', 'ok');
      }
      while ($state != FEEDS_BATCH_COMPLETE);
    }
  }
  $t_end = microtime(TRUE);

  /* Log.
   * ------------------------------------------------------------------------ */
  if (module_exists('message_library_importer_log')) {
    message_library_importer_log_add_log($t_start, $t_end);
  }

  // @TODO: Check the import status.

  /* Reindex the content.
   * ------------------------------------------------------------------------ */
  __drush_log(t("Reindexing..."), 'status');
  $id = 'message_library_index';
  $index = search_api_index_load($id);
  if ($index && ($index instanceof SearchApiIndex)) {
    $index_s = search_api_index_status($index);
    // XXX: Clear the index, and index all over. Not sure this approach
    // is optimal and necessary, will take a look at this after havig a better
    // understanding how search_api works. (by kurt)
    $index->clear();
    _search_api_batch_indexing_create($index, '-1', '-1', $index_s['total'] - $index_s['indexed']);
  }

  /* Flush cache.
   * ------------------------------------------------------------------------ */
  __drush_log(t("Flushing caches..."), 'status');
  drupal_flush_all_caches();
  return TRUE;
}

/**
 *
 * Implements hook_feeds_after_parse()
 *
 * This is invoked between second and third stage of the importing. The three
 * stages are fetch, parse and process. What we are dealing here is the result
 * parsed by the csv parsers.
 *
 * @see: FeedsSource::import()
 */
function message_library_importer_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if (empty($result->items)) return;

  $result->items = message_library_importer_clean_result_items($result->items);

  // Prevent some at risk group terms from importing.
  // TODO: Not sure this is necessary, as the at risk group vocabulary seems
  // not useful on the HR platform.
  if ($source->id == 'message_library_term_at_risk_group') {
    $result->items = message_library_importer_filter_arg_terms($result->items);
  }
  // The order of the terms to be processed matters, it will decide whether
  // the parent/child relationship will be properly set up. We do some custom
  // processing here to put the term with the highest hierarchy to the top of
  // list, the the lowest to the bottom.
  $checklist = array(
    'message_library_term_at_risk_group',
    'message_library_term_hazard',
    'message_library_term_information_type',
    'message_library_term_issues',
    'message_library_term_sector',
    'message_library_term_target_audience',
  );

  if (in_array($source->id, $checklist)) {
    $term_tree = message_library_importer_parsed_term_items_build_tree($result->items, 0);
    $sorted_tids = (message_library_importer_parsed_term_items_extract_tids($term_tree));

    // Sort it
    $sorted_terms = array_flip($sorted_tids);
    foreach ($result->items as $key => $item) {
      if (array_key_exists($item['term id'], $sorted_terms)) {
        $sorted_terms[$item['term id']] = $item;
        unset($result->terms[$key]);
      }
    }
    $result->items = $sorted_terms;
  }
  else if ($source->id == 'message_library_node_message') {
    array_walk($result->items, '_message_library_importer_map_message_node_field');
    $result->items = message_library_importer_remap_message_arg_field($result->items);
  }
}

/**
 *
 * Implemements hook_feeds_presave()
 * This hook is invoked before a feed item is saved.
 *
 * @see: FeedsProcessor::process()
 */
function message_library_importer_feeds_presave(FeedsSource $source, $entity, $item) {
  // Set the right target for field 'field_message_source'
  // Only for message nodes
  if (!empty($entity->nid) && !empty($entity->type) && ($entity->type == 'message')) {
    $entity->status = 1;
    $field_lan = field_language('node', $entity, 'field_message_source');
    $entity->field_message_source = array();
    if (!empty($item['source'])) {
      foreach ($item['source'] as $entry) {
        $entry = array_map('trim', $entry);

        $entity->field_message_source[$field_lan][] = array(
          'title' => $entry['title'],
          'url' => $entry['url'],
        );
      }
    }
  }
}

/**
 * Callback for grouping the parsed terms by hierarchy
 */
function message_library_importer_parsed_term_items_build_tree($items, $parent) {
  $result = array();

  foreach ($items as $item) {
    if (!is_null($item['parent term id']) && $item['parent term id'] == $parent) {
      $new_item = $item;
      $new_item['children'] = message_library_importer_parsed_term_items_build_tree($items, $new_item['term id']);
      $result[] = $new_item;
    }
  }
  return !empty($result) ? $result : NULL;
}

/**
 * Callback for flattening the terms nested by hierarchy
 */
function message_library_importer_parsed_term_items_extract_tids($children) {
  $result = array();
  // Outter
  foreach ($children as $child) {
    $result[] = $child['term id'];
  }
  // Inner
  foreach ($children as $child) {
    if (!empty($child['children'])) {
      $result = array_merge($result, message_library_importer_parsed_term_items_extract_tids($child['children']));
    }
  }
  return $result;
}

/**
 * Callback for mapping fields
 */
function _message_library_importer_map_message_node_field(&$value, $index) {
  // Sensitivity field
  $mapping = array(
    'no guidance required' => 0,
    'guidance required/sensitive' => 1,
    'highly sensitive' => 2,
  );

  if (!empty($value['sensitivity'])) {
    $old_label = trim(strtolower($value['sensitivity']));

    if (array_key_exists($old_label, $mapping)) {
      $value['sensitivity'] = $mapping[$old_label];
    }

    // 'Alert Questions' - The feeds tamper remove the quesition mark and
    // add a empty option. Fix it here.
    $value['alert questions'] = array_map('trim', $value['alert questions']);
    $value['alert questions'] = array_filter($value['alert questions']);
    if ($value['sensitivity'] == 2 && !empty($value['alert questions'])) {
      foreach ($value['alert questions'] as $key => $question) {
        if (empty($question)) {
          unset($value['alert questions'][$key]);
        }
        else {
          if (substr_compare($question, '?', -1) != 0) {
            $value['alert questions'][$key] .= '?';
          }
        }
      }
    }
  }

  // Process link fields, Source and Websites
  $link_fields = array(
    'source',
    'websites',
  );

  foreach ($link_fields as $link_field) {
    $value[$link_field] = trim($value[$link_field]);
    if (!empty($value[$link_field])) {
      $json_raw = $value[$link_field];
      // The json string must use double quotes, and the exported csv have double
      // quotes as wrappe. So the double string of the json string is turned into
      // single quotes in the master instance's csv export preprocessor
      $json_raw = preg_replace("/'(?=[:|,|}])/",  '"', $json_raw);
      $json_raw = preg_replace("/(?<=[:|,|{])'/", '"', $json_raw);

      $result = json_decode($json_raw, true);

      if (!empty($result)) {
        $value[$link_field] = array();
        foreach ($result as $key => $item) {
          $value[$link_field][] = $item;
        }
      }
      else {
        watchdog('message_library_importer', t('Unable to parse the url data: %url', array('%url' => $json_raw)));
        $value[$link_field] = array();
      }
    }
  }

  // Process the attachment fields
  $example = trim($value['examples of communication around this issue']);
  $value['examples of communication around this issue'] = array();
  if (!empty($example)) {
    $example_items = explode(',', $example);

    if (!empty($example_items)) {
      foreach ($example_items as $item) {
        $item = trim($item);
        if (link_validate_url($item) != FALSE) {
          $value['examples of communication around this issue'][] = array(
            'url' => $item,
            'title' => '',
          );
        }
        else {
          // @TODO: Log this
        }
      }
    }
  }
}

/**
 * Clear out all the content imported by message-library
 * This will clean up the following content:
 * + Taxonomy terms in vocabulary:
 *   - at_risk_groups
 *   - hazard
 *   - information_type
 *   - issues
 *   - sector
 *   - target_audience
 *   - threat
 * + Nodes of content type:
 *   - message
 */
function message_library_importer_clear_out_content() {
  // Clear all the content of type: Message
  $node_types = array('message');

  $results = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $node_types, 'IN')
    ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }

  if (!empty($nids)) {
    node_delete_multiple($nids);
  }

  // Clear all the terms of vocabulary:
  // - 'At Risk Group'
  // - 'Target Audience'
  // - 'Information Type'
  // - 'Hazard'
  // - 'Issues'
  // - 'Sector'
  // - 'Threat'
  $vocabularies = array(
    'at_risk_groups',
    'hazard',
    'information_type',
    'issues',
    'sector',
    'target_audience',
    'threat',
  );

  $vocabs = array();
  foreach($vocabularies as $vocab_name) {
    $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
    if (empty($vocab)) {
      continue;
    }
    $vocabs[$vocab->vid] = $vocab;
  }
  $vids = array_keys($vocabs);

  $tids = db_select('taxonomy_term_data', 'td')
    ->fields('td', array('tid'))
    ->condition('vid', $vids, 'IN')
    ->orderBy('tid', 'ASC')
    ->execute()
    ->fetchCol('tid');

  foreach ($tids as $tid) {
    taxonomy_term_delete($tid);
  }

  // Prevent from some terms from still appearing in the exposed dropdowns
  drupal_flush_all_caches();
}

/**
 * Wrapper around `drush_log()`
 */
function __drush_log() {
  if (function_exists('drush_log')) {
    call_user_func_array('drush_log', func_get_args());
  }
}

/**
 * Wrapper around `drush_print()`
 */
function __drush_print() {
  if (function_exists('drush_print')) {
    call_user_func_array('drush_print', func_get_args());
  }
}

/**
 * Wrapper around `drush_html_to_text()`
 */
function __drush_html_to_text() {
  if (function_exists('drush_html_to_text')) {
    call_user_func_array('drush_html_to_text', func_get_args());
  }
}

/**
 * Get some general infomation about an feeds importer.
 */
function message_library_importer_get_importer_info($source) {
  if (is_numeric($source)) {
    $source = feeds_source($source);
  }
  // Get the entity type and entity name from the processor.
  if (($source instanceof FeedsSource) && !empty($source->importer->processor)) {

    if ($source->importer->processor instanceof FeedsNodeProcessor) {
      return array(
        'type' => 'node',
        'name' => $source->importer->processor->config['content_type'],
      );
    }
    else if ($source->importer->processor instanceof FeedsTermProcessor) {
      return array(
        'type' => 'term',
        'name' => $source->importer->processor->config['vocabulary'],
      );
    }
  }
}

/**
 * Implements hook_feeds_plugins()
 */
function message_library_importer_feeds_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'message_library_importer') . '/plugins';

  $info['MlFeedsTermProcessor'] = array(
    'name' => 'Taxonomy term processor (Message Library)',
    'description' => 'Create taxonomy terms.',
    'help' => 'Create taxonomy terms from parsed content.',
    'handler' => array(
      'parent' => 'FeedsTermProcessor',
      'class' => 'MlFeedsTermProcessor',
      'file' => 'MlFeedsTermProcessor.inc',
      'path' => $path,
    ),
  );
  $info['MlFeedsNodeProcessor'] = array(
    'name' => 'Node processor (Message Library)',
    'description' => 'Create and update nodes.',
    'help' => 'Create and update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'MlFeedsNodeProcessor',
      'file' => 'MlFeedsNodeProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Remap the 'At risk group' terms (from infoasaid) to terms in 'Population
 * Types' vocabulary (hr platform)
 *
 */
function message_library_importer_remap_arg_terms(&$items) {
  // On the left is the term to replace, on the right is the replacement.
  $mappings = array(
    'All children under 18' => 'Children',
    'All women'             => 'Women',
    'All Vulnerable Groups' => 'Marginalised Groups',
  );

  // Get the old tids of terms we'll gonna mapped to.
  $old_tids = array();
  foreach ($items as $k => $item) {
    $name = trim($item['term name']);
    if (in_array($item['term name'], $mappings)) {
      $old_tids[$name] = $items[$k]['term id'];
    }
  }

  $incoming_terms = array();
  $new_terms = array();
  $vocab_p = taxonomy_vocabulary_machine_name_load('population_types');

  // Check if whether all the incoming terms already exists the in 'Population
  // types'
  foreach ($items as $k => &$item) {
    $item['term name'] = trim($item['term name']);
    // Check if there are some new term (which only exist in the infoasaid.org)
    // if found, don't import it...if we import it, we will add new term to the
    // 'population types' vocabulary.
    $term_search = taxonomy_get_term_by_name($item['term name'], $vocab_p->machine_name);
    if (empty($term_search)) {
      unset($items[$k]);
    }

    // Remap the terms.
    if (array_key_exists($item['term name'], $mappings)) {
      if (isset($old_tids[$item['term name']])) {
        $item['term id'] = $old_tids[$item['term name']];
        $item['term name'] = $mappings[$item['term name']];
        $item['parent term id']   = '';
        $item['parent term name'] = '';
      }
      else {
        unset($items[$k]);
      }
    }
  }
}

/**
 * Prevent some at risk group terms from importing.
 *
 * TODO: Not sure this is right place to implement this. Because the population
 * types vocabulary is used to replace this vocabulary.
 *
 */
function message_library_importer_filter_arg_terms($items) {
  $blacklist = array(
    'All children under 18',
    'All women',
    'All vulnerable groups'
  );

  foreach ($items as $k => $item) {
    $name = ucfirst(strtolower(trim($item['term name'])));
    if (in_array($name, $blacklist)) {
      unset($items[$k]);
    }
  }
  return $items;
}

/**
 * Remap some terms from infoasaid's at risk group vocabulary to the terms in
 * HR platform's 'population types' terms.
 */
function message_library_importer_remap_message_arg_field($items) {
  if (!count($items)) return $items;

  $mappings = array(
    'All women'             => 'Women',
    'All children under 18' => 'Children',
    'All vulnerable groups' => 'Vulnerable Groups',
  );

  foreach ($items as $k => $item) {
    if (!empty($item['at risk group'])) {
      foreach ($item['at risk group'] as $j => $v) {
        if (isset($mappings[$v])) {
          $items[$k]['at risk group'][$j] = $mappings[$v];
        }
      }
      $items[$k]['at risk group'] = array_unique($items[$k]['at risk group']);
    }
  }

  // Some extra work. Check all the terms in 'at risk group' field, if it doesn't exist in the
  // population type vocabulary, then don't import it and log it.
  // We do this check so our import process doesn't alter the accidentally add new term
  // to population types vocabulary.
  $incoming_terms = array();
  $vocab_p = taxonomy_vocabulary_machine_name_load('population_types');
  foreach ($items as $item) {
    if (!empty($item['at risk group'])) {
      foreach ($item['at risk group'] as $v) {
        $v = trim($v);
        if (!in_array($v, $incoming_terms)) {
          // Remove any empty term.
          if (!$v) {
            $empty_terms = taxonomy_get_term_by_name($v, $vocab_p->machine_name);
            foreach ($empty_terms as $empty_term) {
              taxonomy_term_delete($empty_term->tid);
            }
          }
          else if ($result = taxonomy_get_term_by_name($v, $vocab_p->machine_name)) {
            foreach ($result as $t) {
              $incoming_terms[$t->tid] = $t->name;
            }
          }
          else {
            // something must goes wrong..
          }
        }
      }
    }
  }
  return $items;
}

/**
 * Some cleaning on the parsed result - remove the surrounding space, remove
 * empty array entry, etc. This step could effective prevent some empty terms
 * from being created.
 */
function message_library_importer_clean_result_items($items) {
  foreach ($items as $i => $item) {
    foreach ($item as $field_name => $field_val) {
      if (is_array($field_val)) {
        $items[$i][$field_name] = array_filter(array_map('trim', $field_val));
      }
      else if (is_string($field_val)) {
        $item[$i][$field_name] = trim($field_val);
      }
    }
  }
  return $items;
}
