<?php
/**
 * @file
 */

include_once 'message_library_importer.features.inc';

/**
 * Implements hook_cron()
 */
function message_library_importer_cron() {
  // Fix for sometimes the scheduler sometimes get lost.
  job_scheduler_rebuild_scheduler('job_scheduler_trigger');
}

/**
 * Implements hook_menu()
 */
function message_library_importer_menu() {
  $items['admin/config/message_library/importer'] = array(
    'title' => 'Feeds Importer',
    'description' => 'Configuration on the Feeds importer for Message Library',
    'page callback' => 'message_library_importer_log_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'message_library_importer_log.module',
    'file path' => drupal_get_path('module', 'message_library_importer_log'),
  );
  $items['admin/config/message_library/importer/status'] = array(
    'title' => 'Status',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/message_library/importer/import_path'] = array(
    'title' => 'Import Path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_library_importer_admin_form'),
    'file' => 'message_library_importer.admin.inc',
    'file path' => drupal_get_path('module', 'message_library_importer'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_action_info()
 */
function message_library_importer_action_info() {
  return array(
    'message_library_importer_message_library_import_action' => array(
      'type' => 'job_scheduler',
      'label' => t('Message Library Import'),
      'configurable' => FALSE,
      'triggers' => array(
        'job_scheduler_message_library',
      ),
    ),
  );
}

/**
 * Implements hook_feeds_plugins()
 */
function message_library_importer_feeds_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'message_library_importer') . '/plugins';

  $info['MlFeedsTermProcessor'] = array(
    'name' => 'Taxonomy term processor (Message Library)',
    'description' => 'Create taxonomy terms.',
    'help' => 'Create taxonomy terms from parsed content.',
    'handler' => array(
      'parent' => 'FeedsTermProcessor',
      'class' => 'MlFeedsTermProcessor',
      'file' => 'MlFeedsTermProcessor.inc',
      'path' => $path,
    ),
  );
  $info['MlFeedsNodeProcessor'] = array(
    'name' => 'Node processor (Message Library)',
    'description' => 'Create and update nodes.',
    'help' => 'Create and update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'MlFeedsNodeProcessor',
      'file' => 'MlFeedsNodeProcessor.inc',
      'path' => $path,
    ),
  );
  /**
   * Here is a few custom CSV parsers hope to make things simpler.
   */
  $info['MlFeedsCSVParser'] = array(
    'name' => '[Message Library] CSV parser',
    'description' => 'Parse data in Comma Separated Value format.',
    'handler' => array(
      'parent' => 'FeedsCSVParser',
      'class'  => 'MlFeedsCSVParser',
      'file'   => 'MlFeedsCSVParser.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserIssues'] = array(
    'name' => '[Message Library] CSV parser - Issues',
    'description' => 'Parse \'Issues\' terms from csv file.',
    'help' => 'Parse \'Issues\' terms from csv file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserIssues',
      'file'   => 'MlFeedsCSVParserIssues.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserArg'] = array(
    'name' => '[Message Library] CSV parser - ARG',
    'description' => 'Parse \'At Risk Group\' terms from CSV file.',
    'help' => 'Parse \'At Risk Group\' terms from CSV file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserArg',
      'file'   => 'MlFeedsCSVParserArg.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserHazard'] = array(
    'name' => '[Message Library] CSV parser - Hazard',
    'description' => 'Parse \'Hazard\' terms from CSV file.',
    'help' => 'Parse \'Hazard\' terms from CSV file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserHazard',
      'file'   => 'MlFeedsCSVParserHazard.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserInfotype'] = array(
    'name' => '[Message Library] CSV parser - IT',
    'description' => 'Parse \'Information Type\' terms from CSV file.',
    'help' => 'Parse \'Information Type\' terms from CSV file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserInfotype',
      'file'   => 'MlFeedsCSVParserInfotype.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserSector'] = array(
    'name' => '[Message Library] CSV parser - Sector',
    'description' => 'Parse \'Sector\' terms from CSV file.',
    'help' => 'Parse \'Sector\' terms from CSV file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserSector',
      'file'   => 'MlFeedsCSVParserSector.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserTa'] = array(
    'name' => '[Message Library] CSV parser - TA',
    'description' => 'Parse \'Target Audience\' terms from CSV file.',
    'help' => 'Parse \'Target Audience\' terms from CSV file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserTa',
      'file'   => 'MlFeedsCSVParserTa.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserThreat'] = array(
    'name' => '[Message Library] CSV parser - Threat',
    'description' => 'Parse \'Threat\' terms from CSV file.',
    'help' => 'Parse \'Threat\' terms from CSV file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserThreat',
      'file'   => 'MlFeedsCSVParserThreat.inc',
      'path'   => $path,
    ),
  );
  $info['MlFeedsCSVParserMessage'] = array(
    'name' => '[Message Library] CSV parser - Message',
    'description' => 'Parse Message nodes from csv file.',
    'help' => 'Parse \'Message\' nodes from csv file.',
    'handler' => array(
      'parent' => 'MlFeedsCSVParser',
      'class'  => 'MlFeedsCSVParserMessage',
      'file'   => 'MlFeedsCSVParserMessage.inc',
      'path'   => $path,
    ),
  );
  return $info;
}

/**
 * Action callback for import the message library.
 * This is to be used by the trigger set up by the 'job_scheduler'.
 */
function message_library_importer_message_library_import_action($object, $context) {
  __drush_print("\n===== Message Library Import =====");

  // The importing order of feeds importers.
  $importer_ids = array(
    'message_library_term_hazard',
    'message_library_term_sector',
    'message_library_term_issues',

    'message_library_term_threat',
    'message_library_term_information_type',
    'message_library_term_at_risk_group',
    'message_library_term_target_audience',

    'message_library_node_message',
  );

  /* Pre-import check
   * ------------------------------------------------------------------------ */
  // Ensure every importer has a valid path set for the HTTP fetcher.
  $import_paths = variable_get('ml_importer_import_paths', array());
  foreach ($importer_ids as $id) {
    if (empty($import_paths[$id]) || !feeds_valid_url($import_paths[$id])) {
      watchdog('message_library_importer', t('No import path for feeds importer !id', array('!id' => $id)));
      return FALSE;
    }
  }

  /* Import the feeds.
   * ------------------------------------------------------------------------ */
  $t_start = microtime(TRUE);
  $step = 1;
  foreach ($importer_ids as $importer_id) {
    $feeds_source = feeds_source($importer_id);

    $config = $feeds_source->getConfig();
    $config['FeedsHTTPFetcher']['source'] = $import_paths[$importer_id];
    $feeds_source->setConfig($config);
    $feeds_source->save();

    if (!empty($feeds_source)
      && is_a($feeds_source, 'FeedsSource')
      && ($feeds_source_config = $feeds_source->getConfig())
      && !empty($feeds_source_config['FeedsHTTPFetcher'])
      && !empty($feeds_source_config['FeedsHTTPFetcher']['source'])
      && feeds_valid_url($feeds_source_config['FeedsHTTPFetcher']['source'])) {

      $importer_info = message_library_importer_get_importer_info($feeds_source);
      __drush_log(t('!i. Importing !name !type', array('!name' => $importer_info['name'], '!type' => $importer_info['type'], '!i' => $step++)) . 's', 'status');
      do {
        $state = $feeds_source->import();
        __drush_log('   ' . round($state * 100) . '%', 'ok');
      }
      while ($state != FEEDS_BATCH_COMPLETE);
    }
  }
  $t_end = microtime(TRUE);

  /* Log.
   * ------------------------------------------------------------------------ */
  if (module_exists('message_library_importer_log')) {
    message_library_importer_log_add_log($t_start, $t_end);
  }

  // @TODO: Check the import status.

  /* Reindex the content.
   * ------------------------------------------------------------------------ */
  __drush_log(t("Reindexing..."), 'status');
  $id = 'message_library_index';
  $index = search_api_index_load($id);
  if ($index && ($index instanceof SearchApiIndex)) {
    $index_s = search_api_index_status($index);
    // XXX: Clear the index, and index all over. Not sure this approach
    // is optimal and necessary, will take a look at this after havig a better
    // understanding how search_api works. (by kurt)
    $index->clear();
    _search_api_batch_indexing_create($index, '-1', '-1', $index_s['total'] - $index_s['indexed']);
  }

  /* Flush cache.
   * ------------------------------------------------------------------------ */
  __drush_log(t("Flushing caches..."), 'status');
  drupal_flush_all_caches();
  return TRUE;
}

/**
 *
 * Implemements hook_feeds_presave()
 * This hook is invoked before a feed item is saved.
 *
 * @see: FeedsProcessor::process()
 * @see: MlFeedsCSVParserMessage:parse()
 */
function message_library_importer_feeds_presave(FeedsSource $source, $entity, $item) {
  if (!empty($entity->nid) && !empty($entity->type) && ($entity->type == 'message')) {
    $entity->status = 1;

    // Set target for field 'Source'
    $field_lan = field_language('node', $entity, 'field_message_source');
    $entity->field_message_source = array();
    if (!empty($item['source'])) {
      foreach ($item['source'] as $entry) {
        $entity->field_message_source[$field_lan][] = array(
          'title' => $entry['title'],
          'url'   => $entry['url'],
        );
      }
    }

    // Set target for field 'Websites'
    $field_lan = field_language('node', $entity, 'field_message_url');
    $entity->field_message_url = array();
    if (!empty($item['websites'])) {
      foreach ($item['websites'] as $entry) {
        $entity->field_message_url[$field_lan][] = array(
          'title' => $entry['title'],
          'url'   => $entry['url'],
        );
      }
    }

    // Set target for field 'Examples of Communication around this issue'
    $field_lan = field_language('node', $entity, 'field_message_example_communic');
    $entity->field_message_example_communic = array();
    if (!empty($item['examples of communication around this issue'])) {
      foreach ($item['examples of communication around this issue'] as $entry) {
        $entity->field_message_example_communic[$field_lan][] = array(
            'title' => $entry['title'],
            'url'   => $entry['url'],
        );
      }
    }

  }
}


/**
 * Clear out all the content imported by message-library
 * This will clean up the following content:
 * + Taxonomy terms in vocabulary:
 *   - at_risk_groups
 *   - hazard
 *   - information_type
 *   - issues
 *   - sector
 *   - target_audience
 *   - threat
 * + Nodes of content type:
 *   - message
 */
function message_library_importer_clear_out_content() {
  // Clear all the content of type: Message
  $node_types = array('message');

  $results = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $node_types, 'IN')
    ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }

  if (!empty($nids)) {
    node_delete_multiple($nids);
  }

  // Clear all the terms of vocabulary:
  // - 'At Risk Group'
  // - 'Target Audience'
  // - 'Information Type'
  // - 'Hazard'
  // - 'Issues'
  // - 'Sector'
  // - 'Threat'
  $vocabularies = array(
    'at_risk_groups',
    'hazard',
    'information_type',
    'issues',
    'sector',
    'target_audience',
    'threat',
  );

  $vocabs = array();
  foreach($vocabularies as $vocab_name) {
    $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
    if (empty($vocab)) {
      continue;
    }
    $vocabs[$vocab->vid] = $vocab;
  }
  $vids = array_keys($vocabs);

  $tids = db_select('taxonomy_term_data', 'td')
    ->fields('td', array('tid'))
    ->condition('vid', $vids, 'IN')
    ->orderBy('tid', 'ASC')
    ->execute()
    ->fetchCol('tid');

  foreach ($tids as $tid) {
    taxonomy_term_delete($tid);
  }

  // Prevent from some terms from still appearing in the exposed dropdowns
  drupal_flush_all_caches();
}

/**
 * Wrapper around `drush_log()`
 */
function __drush_log() {
  if (function_exists('drush_log')) {
    call_user_func_array('drush_log', func_get_args());
  }
}

/**
 * Wrapper around `drush_print()`
 */
function __drush_print() {
  if (function_exists('drush_print')) {
    call_user_func_array('drush_print', func_get_args());
  }
}

/**
 * Wrapper around `drush_html_to_text()`
 */
function __drush_html_to_text() {
  if (function_exists('drush_html_to_text')) {
    call_user_func_array('drush_html_to_text', func_get_args());
  }
}

/**
 * Get some general infomation about an feeds importer.
 */
function message_library_importer_get_importer_info($source) {
  if (is_numeric($source)) {
    $source = feeds_source($source);
  }
  // Get the entity type and entity name from the processor.
  if (($source instanceof FeedsSource) && !empty($source->importer->processor)) {

    if ($source->importer->processor instanceof FeedsNodeProcessor) {
      return array(
        'type' => 'node',
        'name' => $source->importer->processor->config['content_type'],
      );
    }
    else if ($source->importer->processor instanceof FeedsTermProcessor) {
      return array(
        'type' => 'term',
        'name' => $source->importer->processor->config['vocabulary'],
      );
    }
  }
}

