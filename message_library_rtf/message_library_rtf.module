<?php

define('MESSAGE_GUIDANCE_NOT_SENSITIVE', 0);
define('MESSAGE_GUIDANCE_SENSITIVE', 1);
define('MESSAGE_GUIDANCE_VERY_SENSITIVE', 2);

$path = drupal_get_path('module', 'message_library_rtf');
require_once  $path . '/libraries/phprtflite/lib/PHPRtfLite.php';
require_once  $path . '/libraries/phprtflite/lib/PHPRtfLite/Autoloader.php';

/**
 * Implements hook_menu().
 */
function message_library_rtf_menu() {
  $items = array();
  $items['message-library-rtf/threat/%']= array(
    'page callback' => 'message_library_rtf_generate_threat_rtf',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_libraries_info()
 *
 * This is not being used, and not probably imcomplete
 */
function message_library_rtf_libraries_info() {
  $libraries['phprtflite'] = array(
    'title' => 'PHPRtfLite',
    'vendor url' => 'http://sourceforge.net/projects/phprtf/',
    'download url' => 'http://sourceforge.net/projects/phprtf/files/phprtflite/',
    'path' => 'lib',
    'files' => array(
      'php' => array(
        'PHPRtfLite.php',
        'PHPRtfLite/Autoloader.php'
      ),
    ),
  );
  return $libraries;
}

/**
 * Callback for RTF document generation
 *
 * To debug the process of RTF document generation, you could comment out the
 * line `$rtf->sendRtf('message library');` to stop the RTF download
 */
function message_library_rtf_generate_threat_rtf($tids) {
  $tids = urldecode($tids);
  $tids = explode(',', $tids);

  // registers PHPRtfLite autoloader (spl)
  MyPHPRtfLite::registerAutoloader();
  // rtf document instance
  $rtf = new MyPHPRtfLite();

  // Settings
  $arial28       = new PHPRtfLite_Font(28, 'Arial', '#B91222');
  $arial18       = new PHPRtfLite_Font(18, 'Arial', '#B91222');
  $arial14       = new PHPRtfLite_Font(14, 'Arial', '#000000');
  $arial12       = new PHPRtfLite_Font(12, 'Arial', '#000000');
  $arial12Link   = new PHPRtfLite_Font(12, 'Arial', '#000000');
  $arial10Black  = new PHPRtfLite_Font(10, 'Arial', '#000000');
  $times12       = new PHPRtfLite_Font(12, 'Times new Roman');
  $font_link     = new PHPRtfLite_Font(12, 'Arial', '#B91222');

  $par_format = new PHPRtfLite_ParFormat();
  $par_list   = new PHPRtfLite_ParFormat();
  $par_list->setIndentLeft(1);

  // add section
  $sect = $rtf->addSection();

  $terms = taxonomy_term_load_multiple($tids);
  $j = 0;
  foreach ($terms as $key => $term) {
    $threat_wrapper = entity_metadata_wrapper('taxonomy_term', $term);

    // Give some space between threat
    if ($j != 0) {
      $sect->addEmptyParagraph();
    }

    # ============================
    # ====  Add threat title  ====
    # ============================
    $sect->writeText(check_plain($term->name) . '<br>', $arial28, $par_format);

    # ============================
    # ====  Add threat issue  ====
    # ============================
    $thret_issues_strs = array();
    foreach ($threat_wrapper->field_threat_category->getIterator() as $delta => $issue_wrapper) {
      $title = check_plain($issue_wrapper->name->value());
      if (empty($title) || in_array($title, $thret_issues_strs)) {
        continue;
      }
      $thret_issues_strs[] = $title;
    }

    if (count($thret_issues_strs)) {
      $text = '<b><i>Issue: </b></i>';
      $text .= implode(', ', $thret_issues_strs) . '<br>';
      $sect->writeText($text, $times12, $par_format);
    }

    # ===============================
    # ====  Add threat messages  ====
    # ===============================
    $message_nids = _message_library_get_threat_messages($term->tid);
    if (!empty($message_nids)) {
      $messages = node_load_multiple($message_nids);
      $i = 0;
      foreach ($messages as $message) {
        // Create an entity wrapper for easier data
        $message_wrapper = entity_metadata_wrapper('node', $message);

        # -----------------------
        # ---- Message Title ----
        # -----------------------
        $text = ($i == 0) ? '' : '<br>';
        $text .= ($i+1) . '. ' . $message->title . '<br>';
        $sect->writeText($text, $arial18, $par_format);

        // Get the 'Guidance'(Sensitivity) of the message
        // - 0 | No guidance required / (Not Sensitive)
        // - 1 | Guidance required / Sensitive
        // - 2 | Highly sensitive
        // @see: admin/structure/types/manage/message/fields/field_message_sensitivity
        $guidance_level = (int) $message_wrapper->field_message_sensitivity->value();

        if (in_array($guidance_level, array(MESSAGE_GUIDANCE_SENSITIVE, MESSAGE_GUIDANCE_VERY_SENSITIVE))) {
          # ---------------------------
          # ---- Sensitive Message ----
          # ---------------------------
          $sen_message = $message_wrapper->field_message_sensitivity_messag->value();
          if (!empty($sen_message)) {
            $text = '<br><i>' . strtoupper(trim($sen_message)) . '</i><br><br>';
            $sect->writeText($text, $arial12, $par_format);
          }

          # -------------------------------------------------------
          # ---- Alert questions (for very sensitive messages) ----
          # -------------------------------------------------------
          // @TODO: Some empty value filled into this field, investigate what's
          // wrong, now just some quick workaround
          if ($guidance_level == MESSAGE_GUIDANCE_VERY_SENSITIVE) {
            $sen_questions = $message_wrapper->field_message_sensitivity_questi->value();
            $sen_questions = array_filter($sen_questions);

            if (!empty($sen_questions)) {
              foreach ($sen_questions as $question) {
                $sect->writeText($question, $times12, $par_format);
              }
            }
          }
        }

        # ------------------------------------
        # ---- Message description (body) ----
        # ------------------------------------
        $message_desc = trim($message_wrapper->field_message_group_mess->value());
        if (!empty($message_desc)) {
          $text = $message_desc . '<br>';
          $sect->writeText($text, $times12, $par_format);
        }

        # -----------------------
        # ---- At risk group ----
        # -----------------------
        $arg_items = array();
        foreach($message_wrapper->field_message_group_risk->getIterator() as $delta => $term_wrapper) {
          $term_name = $term_wrapper->name->value();
          if (!empty($term_name) && !in_array($term_name, $arg_items)) {
            $arg_items[] = $term_name;
          }
        }

        if (count($arg_items)) {
          $text = '<b><i>At risk group: </i></b>';
          $text .= implode(', ', $arg_items);
          $sect->writeText($text, $times12, $par_format);
        }

        # -------------------------------
        # ---- At risk group comment ----
        # -------------------------------
        $arg_comment = trim($message_wrapper->field_message_group_risk_comment->value());
        if (!empty($arg_comment)) {
          $text = '<b><i>At risk group comment: </i></b>';
          $text .= $arg_comment;
          $sect->writeText($text, $times12, $par_format);
        }

        # -------------------------
        # ---- Target Audience ----
        # -------------------------
        $ta_items = array();
        foreach($message_wrapper->field_message_audience->getIterator() as $delta => $term_wrapper) {
          $term_name = $term_wrapper->name->value();
          if (!empty($term_name) && !in_array($term_name, $arg_items)) {
            $ta_items[] = $term_name;
          }
        }

        if (count($ta_items)) {
          $text = '<b><i>Target audience: </i></b>';
          $text .= implode(', ', $ta_items);
          $sect->writeText($text, $times12, $par_format);
        }

        # ---------------------------------
        # ---- Target Audience Comment ----
        # ---------------------------------
        $ta_comment = trim($message_wrapper->field_message_target_comment->value());
        if (!empty($ta_comment)) {
          $text = '<b><i>Target audience comment: </i></b>';
          $text .= $ta_comment;
          $sect->writeText($text, $times12, $par_format);
        }

        # --------------------------
        # ---- Information Type ----
        # --------------------------
        $it_items = array();
        foreach($message_wrapper->field_message_info_type->getIterator() as $delta => $term_wrapper) {
          $term_name = $term_wrapper->name->value();
          if (!empty($term_name) && !in_array($term_name, $it_items)) {
            $it_items[] = $term_name;
          }
        }

        if (count($it_items)) {
          $text = '<b><i>Information type: </i></b>';
          $text .= implode(', ', $it_items);
          $sect->writeText($text, $times12, $par_format);
        }

        # --------------------------------
        # ---- Guidance (Sensitivity) ----
        # --------------------------------
        $option_list = $message_wrapper->field_message_sensitivity->optionsList();
        $guidance_level = $message_wrapper->field_message_sensitivity->value();

        if (!empty($option_list) && array_key_exists($guidance_level, $option_list)) {
          $text = '<b><i>Guidance: </i></b>';
          $text .= $option_list[$guidance_level];
          $sect->writeText($text, $times12, $par_format);
        }

        # -------------------------
        # ---- Sensitive Cause ----
        # -------------------------
        $sen_cause = trim($message_wrapper->field_message_sensitivity_causes->value());
        if (!empty($sen_cause)) {
          $text = '<b><i>Sensitivity causes: </i></b>';
          $text .= $sen_cause;
          $sect->writeText($text, $times12, $par_format);
        }

        # -----------------------------------------
        # ---- Source & Websites (link fields) ----
        # -----------------------------------------
        $link_fields = array(
          'field_message_source',
          'field_message_url'
        );

        foreach ($link_fields as $link_field) {
          $field_info = field_info_instance('node', $link_field, 'message');
          $link_items = array();

          foreach ($message_wrapper->$link_field->getIterator() as $delta => $link_wrapper) {
            // note: Use EntityStructureWrapper::getPropertyInfo() to inspect
            // the properties available
            $title = $link_wrapper->title->value();
            if (!empty($title)) {
              $link_items[$delta]['title'] = html_entity_decode($title, ENT_QUOTES, 'UTF-8');
            }

            $url = $link_wrapper->url->value();
            if (!empty($url)) {
              if (link_validate_url($url) != FALSE) {
                $link_items[$delta]['url'] = $url;
              }
              else {
                watchdog('message_library_rtf', 'The :field_label field (<em>!field_name</em>) of message :title has a invalid url: <pre>!url</pre> in it.',
                  array(':title' => $message->title, '!url' => $url, ':field_label' => $field_info['label'], '!field_name' => $link_field),
                  WATCHDOG_ERROR, l(t('view node edit page'), 'node/' . $message->nid . '/edit'));
              }
            }
          }

          if (!empty($link_items)) {
            $text = '<b><i>' . $field_info['label'] . ': </i></b>';
            $sect->writeText($text, $times12, $par_format);

            // Output as a list
            $enum = new PHPRtfLite_List_Enumeration($rtf, TYPE_DIAMOND, $times12, $par_list);

            foreach ($link_items as $item) {
              // Only output as link only if the title and url both exist
              if (!empty($item['url']) && !empty($item['title'])) {
                $element = new PHPRtfLite_Element_Hyperlink($rtf, $item['title'], $font_link, $par_list);
                $element->setHyperlink($item['title']);
                $enum->addElement($element);
              }
              elseif (!empty($item['url']) && empty($item['title'])) {
                $element = new PHPRtfLite_Element_Hyperlink($rtf, $item['url'], $font_link, $par_list);
                $element->setHyperlink($item['url']);
                $enum->addElement($element);
              }
              elseif (empty($item['url']) && !empty($item['title'])) {
                $enum->addItem($item['title'], $times12, $par_list);
              }
            }
            $sect->addList($enum);
          }
        }

        # ------------------------------------------------------------------
        # ---- Examples of Communication around this Issue (link field) ----
        # ------------------------------------------------------------------
        // @TODO: Finish this

        $i++;
      }
    }
    else {
      // Some text to say there are no messages found.
    }
    $j++;
  }

  // $rtf->save('Nice');
  $rtf->sendRtf('message library');
  return '';
}

/**
 * Custom class for the PHPRtfLite
 */
class MyPHPRtfLite extends PHPRtfLite {
  public static function registerAutoloader() {
    $baseClassDir = drupal_get_path('module', 'message_library_rtf') . '/libraries/phprtflite/lib';
    MyPHPRtfLite_Autoloader::setBaseDir($baseClassDir);
    return spl_autoload_register(array('MyPHPRtfLite_Autoloader', 'autoload'));
  }
}

/**
 * Custom class auto loader for the  PHPRtfLite relevant classes
 */
class MyPHPRtfLite_Autoloader extends PHPRtfLite_Autoloader {
  public static function autoload($className) {
    // Exclude all the unrelevant classes
    $prefix = 'PHPRtfLite_';
    if (substr($className, 0, strlen($prefix)) !== $prefix) {
      return false;
    }

    // validate classname
    if (!preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/m', $className)) {
      throw new Exception("Class name '$className' is invalid");
    }

    $classFile = self::$_baseDir . '/' . str_replace('_', '/', $className) . '.php';

    // check if file exists
    if (!file_exists($classFile)) {
      throw new Exception("File $classFile does not exist!");
    }

    require $classFile;

    if (!class_exists($className) && !interface_exists($className)) {
      throw new Exception("Class $className could not be found!");
    }
  }
}

/**
 * Get all the messages that belongs to a threat
 */
function _message_library_get_threat_messages($threat_tid) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'message')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_message_threat', 'tid', $threat_tid, '=');
  $result = $query->execute();

  $message_nids = array();
  if (!empty($result['node'])) {
    $message_nids = array_keys($result['node']);
  }

  return $message_nids;
}
