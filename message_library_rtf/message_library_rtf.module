<?php

$path = drupal_get_path('module', 'message_library_rtf');
require_once  $path . '/libraries/phprtflite/lib/PHPRtfLite.php';
require_once  $path . '/libraries/phprtflite/lib/PHPRtfLite/Autoloader.php';
/**
 * Implements hook_menu().
 */
function message_library_rtf_menu() {
  $items = array();
  $items['message-library-rtf/threat/%']= array(
    'page callback' => 'message_library_rtf_generate_threat_rtf',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_libraries_info()
 */
function message_library_rtf_libraries_info() {
  $libraries['phprtflite'] = array(
    'title' => 'PHPRtfLite',
    'vendor url' => 'http://sourceforge.net/projects/phprtf/',
    'download url' => 'http://sourceforge.net/projects/phprtf/files/phprtflite/',
    'path' => 'lib',
    'files' => array(
      'php' => array(
        'PHPRtfLite.php',
        'PHPRtfLite/Autoloader.php'
      ),
    ),
  );
  return $libraries;
}

/**
 * Callback
 */
function message_library_rtf_generate_threat_rtf($tids) {
  $tids = explode(',', $tids);

  // registers PHPRtfLite autoloader (spl)
  MyPHPRtfLite::registerAutoloader();
  // rtf document instance
  $rtf = new MyPHPRtfLite();

  // Settings
  $arial28 = new PHPRtfLite_Font(28, 'Arial', '#B91222');
  $arial18 = new PHPRtfLite_Font(18, 'Arial', '#B91222');
  $arial14 = new PHPRtfLite_Font(14, 'Arial', '#000000');
  $arial12 = new PHPRtfLite_Font(12, 'Arial', '#000000');
  $arial12Link = new PHPRtfLite_Font(12, 'Arial', '#000000');
  $arial10Black = new PHPRtfLite_Font(10, 'Arial', '#000000');
  $times12 = new PHPRtfLite_Font(12, 'Times new Roman');
  $font_link = new PHPRtfLite_Font(12, 'Arial', '#B91222');

  $par_format = new PHPRtfLite_ParFormat();
  $par_list = new PHPRtfLite_ParFormat();
  $par_list->setIndentLeft(1);

  // add section
  $sect = $rtf->addSection();

  $terms = taxonomy_term_load_multiple($tids);
  foreach ($terms as $term) {
    // Add threat title
    $sect->writeText($term->name . '<br>', $arial28, $par_format);

    // Add threat issue
    // note: field_get_items fail due to some bug!
    $issue_tids = array();
    if (!empty($term->field_threat_category[LANGUAGE_NONE])) {
      foreach ($term->field_threat_category[LANGUAGE_NONE] as $item) {
        if (!empty($item['tid'])) {
          $issue_tids[] = $item['tid'];
        }
      }
      $issue_tids = array_unique($issue_tids);
    }
    if (!empty($issue_tids)) {
      $issues_terms = taxonomy_term_load_multiple($issue_tids);

      $text = '<b><i>Issue: </b></i>';
      if (!empty($issues_terms)) {
        $issues_parts = array();
        foreach ($issues_terms as $issue_term) {
          $issues_parts[] = $issue_term->name;
        }
        $text .= implode(', ', $issues_parts) . '<br>';
        $sect->writeText($text, $times12, $par_format);
      }
    }

    // Add threat messages
    $message_nids = _message_library_get_threat_messages($term->tid);
    if (!empty($message_nids)) {
      $messages = node_load_multiple($message_nids);
      foreach ($messages as $i => $message) {
        // Add message title
        $text = ($i == 0) ? '' : '<br>';
        $text .= $message->title . '<br>';
        $sect->writeText($text, $arial18, $par_format);

        // Add message sensitive message or relevant question based on sensitivity
        $sen_level = field_get_items('node', $message, 'field_message_sensitivity');
        $sen_level = reset($sen_level);
        $sen_level = $sen_level['value'];

        // for sensitive message
        if ($sen_level == 1 && !empty($message->field_message_sensitivity_messag['und'][0])) {
          $sen_message = $message->field_message_sensitivity_messag['und'][0]['value'];
          $sen_message = '<br><i>' . strtoupper(trim($sen_message)) . '</i><br><br>';
          $sect->writeText($sen_message, $arial12, $par_format);
        }
        // for very sensitive message
        if ($sen_level == 2 && !empty($message->field_message_sensitivity_messag['und'][0])) {
          $sen_message = $message->field_message_sensitivity_messag['und'][0]['value'];
          $sen_message = '<br><i>' . strtoupper(trim($sen_message)) . '</i><br><br>';
          $sect->writeText($sen_message, $arial12, $par_format);

          if (!empty($message->field_message_sensitivity_questi['und'])) {
            $sen_questions = $message->field_message_sensitivity_questi['und'];
            foreach ($sen_questions as $question) {
              $sect->writeText($question, $times12, $par_format);
            }
          }
        }

        // Add message description
        if (!empty($message->field_message_group_mess['und'][0]['value'])) {
          $text = $message->field_message_group_mess['und'][0]['value'];
          $text = trim($text) . '<br>';
          $sect->writeText($text, $times12, $par_format);
        }

        // Add message 'at risk group'
        $arg_items = field_get_items('node', $message, 'field_message_group_risk');
        if (!empty($arg_items)) {
          $arg_tids = array();
          foreach ($arg_items as $item) {
            $arg_tids[] = $item['tid'];
          }

          $arg_terms = taxonomy_term_load_multiple($arg_tids);
          if (!empty($arg_items)) {
            $text = '<b><i>At risk group: </i></b>';
            $arg_segs = array();

            foreach ($arg_terms as $term) {
              $arg_segs[] = $term->name;
            }
            $text .= implode(', ', $arg_segs);
            $sect->writeText($text, $times12, $par_format);
          }
        }

        // Add message 'at risk group comment'
        if (!empty($message->field_message_group_risk_comment['und'][0]['value'])) {
          $text = '<b><i>At risk group comment: </i></b>';
          $text .= $message->field_message_group_risk_comment['und'][0]['value'];
          $sect->writeText($text, $times12, $par_format);
        }

        // Add message 'target audience'
        $ta_items = field_get_items('node', $message, 'field_message_audience');
        if (!empty($ta_items)) {
          $ta_tids = array();
          foreach ($ta_items as $item) {
            $ta_tids[] = $item['tid'];
          }

          $ta_terms = taxonomy_term_load_multiple($ta_tids);
          if (!empty($ta_items)) {
            $text = '<b><i>Target audience: </i></b>';

            $ta_segs = array();
            foreach ($ta_terms as $term) {
              $ta_segs[] = $term->name;
            }
            $text .= implode(', ', $ta_segs);
            $sect->writeText($text, $times12, $par_format);
          }
        }

        // Add message 'target audience comment'
        if (!empty($message->field_message_target_comment['und'][0]['value'])) {
          $text = '<b><i>Target audience comment: </i></b>';
          $text .= $message->field_message_target_comment['und'][0]['value'];
          $sect->writeText($text, $times12, $par_format);
        }

        // Add message 'infomation type'
        $it_items = field_get_items('node', $message, 'field_message_audience');
        if (!empty($it_items)) {
          $arg_tids = array();
          foreach ($it_items as $item) {
            $arg_tids[] = $item['tid'];
          }

          $it_terms = taxonomy_term_load_multiple($arg_tids);
          if (!empty($it_items)) {
            $text = '<b><i>Information type: </i></b>';
            $it_segs = array();
            foreach ($it_terms as $term) {
              $it_segs[] .= $term->name;
            }
            $text .= implode(', ', $it_segs);
            $sect->writeText($text, $times12, $par_format);
          }
        }

        // Add sensitivity
        $text = '<b><i>Sensitivity: </i></b>';
        if ($sen_level == 2) {
          $text .= 'Very sensitive';
        }
        elseif ($sen_level == 1) {
          $text .= 'Sensitive';
        }
        else {
          $text .= 'Not sensitive';
        }
        $sect->writeText($text, $times12, $par_format);

        // Add message 'sensitivity cause'
        if (!empty($message->field_message_sensitivity_causes['und'][0]['value'])) {
          $text = '<b><i>Sensitivity causes: </i></b>';
          $text .= $message->field_message_sensitivity_causes['und'][0]['value'];
          $sect->writeText($text, $times12, $par_format);
        }

        // Add message 'source' (link)
        $items = field_get_items('node', $message, 'field_message_source');
        if (!empty($items)) {
          $text = '<b><i>Source: </i></b>';
          $sect->writeText($text, $times12, $par_format);

          foreach ($items as $item) {
            $sect->writeHyperLink($item['url'], '<bullet>  ' . $item['title'], $font_link, $par_list);
          }
        }

        // Add message 'websites' (link)
        $items = field_get_items('node', $message, 'field_message_url');
        if (!empty($items)) {
          $text = '<b><i>Websites: </i></b>';
          $sect->writeText($text, $times12, $par_format);

          foreach ($items as $item) {
            $sect->writeHyperLink($item['url'], '<bullet>  ' . $item['title'], $font_link, $par_list);
          }
        }

        // Add message 'Examples of Communication around this issue'
        $items = field_get_items('node', $message, 'field_message_example_communic');
        if (!empty($items)) {
          $text = '<b><i>Examples of Communication around this issue: </i></b>';
          $sect->writeText($text, $times12, $par_format);
          $items = array_map('unserialize', array_unique(array_map('serialize', $items)));
          foreach ($items as $item) {
            $url = file_create_url($item['uri']);
            $sect->writeHyperLink($url, '<bullet>  ' . $item['filename'], $font_link, $par_list);
          }
        }
      }
    }
  }

  //$rtf->save('Nice');
  $rtf->sendRtf();
  return '';
}

/**
 * Custom class for the PHPRtfLite
 */
class MyPHPRtfLite extends PHPRtfLite {
  public static function registerAutoloader() {
    $baseClassDir = drupal_get_path('module', 'message_library_rtf') . '/libraries/phprtfLite/lib';
    MyPHPRtfLite_Autoloader::setBaseDir($baseClassDir);
    return spl_autoload_register(array('MyPHPRtfLite_Autoloader', 'autoload'));
  }
}

/**
 * Custom class auto loader for the  PHPRtfLite relevant classes
 */
class MyPHPRtfLite_Autoloader extends PHPRtfLite_Autoloader {
  public static function autoload($className) {
    // Exclude all the unrelevant classes
    $prefix = 'PHPRtfLite_';
    if (substr($className, 0, strlen($prefix)) !== $prefix) {
      return false;
    }

    // validate classname
    if (!preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/m', $className)) {
      throw new Exception("Class name '$className' is invalid");
    }

    $classFile = self::$_baseDir . '/' . str_replace('_', '/', $className) . '.php';

    // check if file exists
    if (!file_exists($classFile)) {
      var_dump($classFile);
      var_dump(xdebug_get_function_stack());
      throw new Exception("File $classFile does not exist!");
    }

    require $classFile;

    if (!class_exists($className) && !interface_exists($className)) {
      throw new Exception("Class $className could not be found!");
    }
  }
}

/**
 * Get all the messages that belongs to a threat
 */
function _message_library_get_threat_messages($threat_tid) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'message')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_message_threat', 'tid', $threat_tid, '=');
  $result = $query->execute();

  $message_nids = array();
  if (!empty($result['node'])) {
    $message_nids = array_keys($result['node']);
  }

  return $message_nids;
}
