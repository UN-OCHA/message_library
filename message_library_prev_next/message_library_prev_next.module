<?php

define('PREV_NEXT_NODE_TYPE', 'message_library_prev_next_node_type_');

/**
 * Some variables set by this module:
 * - message_library_prev_next_index_nid
 *  The largest node nid found in the table 'node'
 */

/**
 * Implements hook_menu().
 */
function message_library_prev_next_menu() {
  $items['admin/config/message_library/prev_next'] = array(
    'title' => 'Message library prev/next',
    'description' => 'Prev/Next API for nodes',
    'file' => 'message_library_prev_next.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_library_prev_next_admin'),
    'access arguments' => array('administer message library prev next'),
  );

  $items['admin/config/message_library/prev_next/general'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'General',
    'weight' => 0,
  );

  $items['admin/config/message_library/prev_next/re-index'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Prev/Next reset',
    'file' => 'message_library_prev_next.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_library_prev_next_reindex_confirm'),
    'access arguments' => array('administer message library prev next'),
  );

  return $items;
}

/**
 * Reindex, flush the old index data, and set a nid (the current found largest
 * node id) for later cron processing.
 */
function message_library_prev_next_reindex() {
  // Wipe the table clean
  db_query('TRUNCATE {message_library_prev_next_node}');

  // Get the biggest nid
  $max_nid = db_query('SELECT MAX(nid) FROM {node}')->fetchField();

  // Store it in a variable
  variable_set('message_library_prev_next_index_nid', $max_nid);

  if ($max_nid) {
    $msg = t('Prev/Next will index from node %nid downward.',array('%nid' => $max_nid));
    drupal_set_message($msg);
  }
}

/**
 * Implements hook_cron()
 */
function message_library_prev_next_cron() {
  // Get the largest node id
  if ($max_nid = variable_get('message_library_prev_next_index_nid'));
  if (empty($max_nid)) return;

  $batch_size = variable_get('message_library_prev_next_batch_size', 200);

  // Start timer
  timer_start('message_library_prev_next_cron');

  // Get all node ids
  $nids = _message_library_prev_next_get_index_nids();

  $last_nid = FALSE;
  foreach($nids as $nid) {
    // Remove existing data for this node.
    db_delete('message_library_prev_next_node')
      ->condition('nid', $nid)->execute();

    _message_library_prev_next_add($nid);

    // Note that we have indexed at least one node.
    $last_nid = $nid;
  }

  $time = timer_read('message_library_prev_next_cron');

  if ($last_nid !== FALSE) {
    // Prepare a starting point for the next run.
    variable_set('message_library_prev_next_index_nid', $last_nid - 1);
  }
  else {
    // If all nodes have been indexed, set to zero to skip future cron runs.
    variable_set('message_library_prev_next_index_nid', 0);
  }
  watchdog('message_library_prev_next', 'Indexed %count nodes in %time milliseconds.', array('%count' => $count, '%time' => $time));

  // TODO Please convert this statement to the D7 database API syntax.
  // @todo: Add conditions.
  $total = db_query("SELECT COUNT(nid) FROM {node} WHERE status = 1 ")->fetchField();
  $completed = db_query("SELECT COUNT(nid) FROM {message_library_prev_next_node}")->fetchField();
  $remaining = max(0, $total - $completed);
  drupal_set_message(t('Indexed %count nodes for the Prev/Next index. There are %remaining items left to index.', array(
    '%count' => $count,
    '%remaining' => $remaining,
  )));
}

/**
 * Implements hook_block_info().
 */
function message_library_prev_next_block_info() {
  $num_blocks = variable_get('message_library_prev_next_num_blocks', 1);
  for ($b = 1; $b <= $num_blocks; $b++) {
    $blocks[$b] = array(
      'info' => t('Prev/Next links #!blocknum', array('!blocknum' => $b)),
      'status' => 0,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function message_library_prev_next_block_configure($delta) {
  $description = (module_exists('token')) ?
    'Use the available tokens (see below) to customize the link text.' :
    'The [title] token will be replaced by the actual node title.';

  $base = 'message_library_prev_next_block_' . $delta;

  $form['previous'] = array(
    '#type' => 'fieldset',
    '#title' => t('Previous Node'),
    '#collapsible' => TRUE,
  );

  $var = $base . '_prev';
  $form['previous'][$var] = array(
    '#type' => 'checkbox',
    '#title' => t('Display'),
    '#default_value' => variable_get($var, TRUE),
  );

  $var = $base . '_prev_text';
  $form['previous'][$var] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#description' => $description,
    '#default_value' => variable_get($var, '[node:title] »'),
  );
  if (module_exists('token')) {
    $form['previous']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['previous']['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }

  $form['next'] = array(
    '#type' => 'fieldset',
    '#title' => t('Next Node'),
    '#collapsible' => TRUE,
  );

  $var = $base . '_next';
  $form['next'][$var] = array(
    '#type' => 'checkbox',
    '#title' => t('Display'),
    '#default_value' => variable_get($var, TRUE),
  );

  $var = $base . '_next_text';
  $form['next'][$var] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#description' => $description,
    '#default_value' => variable_get($var, '« [node:title]'),
  );

  if (module_exists('token')) {
    $form['next']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    $form['next']['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function message_library_prev_next_block_save($delta, $edit) {
  $base = 'message_library_prev_next_block_' . $delta;
  $keys = array(
    $base . '_prev',
    $base . '_prev_text',
    $base . '_next',
    $base . '_next_text',
  );
  foreach($keys as $key) {
    variable_set($key, $edit[$key]);
  }
}

/**
 * Implements hook_block_view().
 *
 * The original block's output is like this:
 * @code
 * <ul class="prev-next-links">
 *  <li class="prev-next-link-back">
 *    <a href="/message-library">&lt;&lt; Back to the Current Selection</a>
 *    </li>
 *   <li class="prev-next-link-prev">
 *      <a href="/message-library/acute-respiratory-infections-aris">&lt; Previous threat</a>
 *   </li>
 *   <li class="prev-next-link-next">
 *     <a href="/message-library/children-stop-going-school">Next threat &gt;</a>
 *   </li>
 * </ul>
 * @endcode
 *
 */
function message_library_prev_next_block_view($delta) {
  $content = '';

  $base = 'message_library_prev_next_block';
  $prev_display = variable_get("{$base}_{$delta}_prev");
  $prev_text    = variable_get("{$base}_{$delta}_prev_text");
  $next_display = variable_get("{$base}_{$delta}_next");
  $next_text    = variable_get("{$base}_{$delta}_next_text");

  if (arg(0) != 'node' || !is_numeric(arg(1)) || arg(2)) return;
  $node = menu_get_object();

  $p_nid = message_library_prev_next_nid($node->nid, 'prev');
  $n_nid = message_library_prev_next_nid($node->nid, 'next');

  // dpm(compact('delta', 'next_display', 'next_text', 'prev_display', 'prev_text', 'p_nid', 'n_nid', 'node'));

  $links = array();

  // Prepare the link for current selection.
  $view_path = $_SESSION['message_library_prev_next_views_url'];
  $links['prev-next-link-back'] = array(
    'title' => t('<< Back to the Current Selection'),
    'href' => $view_path,
  );

  // Ensure that:
  // - the prev/next item exists
  // - the prev/next item is configured to display

  // Prepare the link for prev item
  if ($prev_display && $p_nid) {
    $title = token_replace($prev_text, array('node' => node_load($p_nid)));
    $links['prev-next-link-prev'] = array(
      'title' => $title,
      'href' => 'node/' . $p_nid,
    );
  }

  // Prepare the link for next item
  if ($next_display && $n_nid) {
    $title = token_replace($next_text, array('node' => node_load($n_nid)));
    $links['prev-next-link-next'] = array(
      'title' => $title,
      'href' => 'node/' . $n_nid,
    );
  }

  $block = array(
    'subject' => t('Prev/Next links'),
    'content' => array(
      '#theme' => 'links',
      '#links' => $links,
      '#attributes' => array('class' => array('prev-next-links')),
    ),
  );
  return $block;
}

/**
 * Implememts MODULE_preprocess_HOOK()
 */
function message_library_prev_next_preprocess_node(&$vars) {
  if ($vars['type'] == 'threat') {
    $block = module_invoke('message_library_prev_next', 'block_view', 1);
    $vars['prev_next_link_block'] = $block;
  }
}

/**
 * Create or update the message_library_prev_next records.
 */
function _message_library_prev_next_add($nid) {
  $node = node_load($nid);
  if (empty($node)) return;


  // Get the the index criteria of this node
  // Example: message_library_prev_next_node_type_message_indexing_criteria
  $node_type = node_type_get_name($node);
  $search_criteria = variable_get(PREV_NEXT_NODE_TYPE . $node_type . '_indexing_criteria', 'nid');

  // Then get that field(criteria) value
  if (empty($node->$search_criteria)) return;
  $criteria_value = $node->$search_criteria;

  $next_nid = _message_library_prev_next_get_next_nid($nid, $search_criteria, $criteria_value);
  $prev_nid = _message_library_prev_next_get_prev_nid($nid, $search_criteria, $criteria_value);

  //print ($prev_nid . ' <= ' . $nid . ' => ' . $next_nid . "\n");

  // Upsert the record
  db_merge('message_library_prev_next_node')
    ->key(array('nid' => $nid))
    ->fields(array(
      'prev_nid' => $prev_nid,
      'next_nid' => $next_nid,
      'changed' => REQUEST_TIME))
    ->execute();

  // Update the other nodes pointing to this node
  $types = node_type_get_types();
  foreach ($types as $type => $name) {
    if (variable_get(PREV_NEXT_NODE_TYPE . $type)) {
      // Get the search criteria set for this type
      $search_criteria = variable_get(PREV_NEXT_NODE_TYPE . $type . '_indexing_criteria', PREV_NEXT_INDEXING_CRITERIA_DEFAULT);

      // Get the criteria value of the current node
      if (empty($node->$search_criteria)) continue;
      $criteria_value = $node->$search_criteria;

      // Update the 'prev_nid' or 'next_nid' if necessary
      $next_nid = _message_library_prev_next_get_next_nid($nid, $search_criteria, $criteria_value);
      if ($next_nid) {
        db_update('message_library_prev_next_node')
          ->fields(array('next_nid' => $nid))
          ->condition('nid', $next_nid)
          ->execute();
      }
      $prev_nid = _message_library_prev_next_get_prev_nid($nid, $search_criteria, $criteria_value);
      if ($prev_nid) {
        db_update('message_library_prev_next_node')
          ->fields(array('prev_nid' => $nid,))
          ->condition('nid', $prev_nid)
          ->execute();
      }
    }
  }
}

/**
 * Update the message_library_prev_next records.
 */
function _message_library_prev_next_modify($nid) {
  // Find out if any other nodes point to this node and update them
  _message_library_prev_next_modify_pointing_nodes($nid);
  // Then update this one
  _message_library_prev_next_add($nid);
}

/**
 * Delete from the message_library_prev_next records.
 */
function _message_library_prev_next_remove($nid) {
  // Find if there is an entry for this node
  $node = db_query("
          SELECT nid, prev_nid, next_nid, changed
          FROM {message_library_prev_next_node}
          WHERE nid = :nid", array(':nid' => $nid))->fetch();

  if ($node) {
    // Delete the data for this node
    db_delete('message_library_prev_next_node')
      ->condition('nid', $nid)
      ->execute();
  }
  // Find out if any other nodes point to this node and update them
  _message_library_prev_next_modify_pointing_nodes($nid);
}

/**
 * Update other nodes pointing to a particular node
 */
function _message_library_prev_next_modify_pointing_nodes($nid) {
  // First for previous
  $result = db_select('message_library_prev_next_node', 'pnn')
    ->fields('pnn', array('nid'))
    ->condition('prev_nid', $nid, '=')
    ->execute();

  while ($nid = $result->fetchField()) {
    _message_library_prev_next_add($nid);
  }

  // Then for next
  $result = db_select('message_library_prev_next_node', 'pnn')
    ->fields('pnn', array('nid'))
    ->condition('next_nid', $nid, '=')
    ->execute();

  while ($nid = $result->fetchField()) {
    _message_library_prev_next_add($nid);
  }

  // @todo: Can these two actions be combined together?
}

/**
 * Implements hook_node_insert().
 */
function message_library_prev_next_node_insert($node) {
  _message_library_prev_next_add($node->nid);
}

/**
 * Implements hook_node_update().
 */
function message_library_prev_next_node_update($node) {
  _message_library_prev_next_modify($node->nid);
}

/**
 * Implements hook_node_delete().
 */
function message_library_prev_next_node_delete($node) {
  _message_library_prev_next_remove($node->nid);
}

/*
 * Callable API function to get the next/prev nid of a given nid
 */
function message_library_prev_next_nid($nid, $op = 'next') {
  foreach (module_implements('message_library_prev_next_nid') as $module) {
    $function = $module . '_message_library_prev_next_nid';
    $ret = $function($nid, $op);
    if ($ret !== FALSE) {
      // If the function returns FALSE, keep trying other methods
      return $ret;
    }
  }

  if ($op == 'prev') {
    return message_library_prev_next_nid_prev($nid);
  }
  elseif ($op == 'next') {
    return message_library_prev_next_nid_next($nid);
  }
  else {
    return 0;
  }
}

function message_library_prev_next_nid_next($nid) {
  return db_query("SELECT next_nid FROM {message_library_prev_next_node}
                  WHERE nid = :nid", array(':nid' => $nid))->fetchField();
}

function message_library_prev_next_nid_prev($nid) {
  return db_query("SELECT prev_nid FROM {message_library_prev_next_node}
                  WHERE nid = :nid", array(':nid' => $nid))->fetchField();
}

/* Helper functions
 * -------------------------------------------------------------------------- */

/*
 * Return an array of node types to be indexed
 */
function _message_library_prev_next_node_types() {
  $types = array();
  $node_types = node_type_get_types();

  foreach ($node_types as $key => $type) {
    // Examples:
    // - message_library_prev_next_node_type_message
    // - message_library_prev_next_node_type_threat
    $check_type = PREV_NEXT_NODE_TYPE . $type->type;
    if (!variable_get($check_type)) continue;
    $types[] = $type->type;
  }

  if (empty($types)) {
    $types = array_keys($node_types);
  }

  return $types;
}

/**
 * Get the previous node id
 */
function _message_library_prev_next_get_prev_nid($nid, $search_criteria, $criteria_value) {
  $nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition($search_criteria, $criteria_value, '<')
    ->condition('status', 1, '=')
    ->orderBy($search_criteria, 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();
  return !empty($nid) ? $nid : 0;
}

/**
 * Get the next node id
 */
function _message_library_prev_next_get_next_nid($nid, $search_criteria, $criteria_value) {
  $nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition($search_criteria, $criteria_value, '>')
    ->condition('status', 1, '=')
    ->orderBy($search_criteria, 'ASC')
    ->range(0, 1)
    ->execute()
    ->fetchField();
  return !empty($nid) ? $nid : 0;
}

/**
 * Get all nodes to be indexed
 */
function _message_library_prev_next_get_index_nids() {
  $types = _message_library_prev_next_node_types();

  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->condition('status', 1 , '=');

  // Limit the node types
  if (!empty($types)) {
    $query->condition('type', $types, 'IN');
  }

  // Limit the node nid, it should be smaller that the specified nid
  if ($top_nid = variable_get('message_library_prev_next_index_nid')) {
    $query->condition('nid', $top_nid, '<=');
  }

  $query->orderBy('nid', 'DESC');
  $result = $query->execute();


  $nids = array();
  while($record = $result->fetchField()) {
    $nids[] = $record;
  }

  return $nids;
}
