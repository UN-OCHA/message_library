<?php

/**
 * Implementation of hook_perm().
 */
function message_library_notices_permission() {
  return array('administer message library notices' => array(
    'title' => t('Administer Message Librart notices'),
    'description' => t('Perform administration tasks for the notices'),
  ));
}

/**
 * Implements hook_theme()
 */
function message_library_notices_theme($existing, $type, $theme, $path) {
  return array(
    'message_library_notices_sensitivity_warning' => array(
      'arguments' => array(),
    ),
    'message_library_notices_sensitivity_questions' => array(
      'template' => 'templates/message_library_notices_sensitivity_warning',
      'arguments' => array('node' => NULL),
    ),
  );
}

/**
 * Implements hook_forms()
 *
 * Map all message_library_notices_question_form_xxx() to form
 * message_library_notices_question_form()
 *
 */
function message_library_notices_forms($form_id, $args) {
  $nids = message_library_get_all_very_sensitive_messages();
  $base_form = 'message_library_notices_question_form';
  if (!empty($nids)) {
    foreach ($nids as $nid) {
      $forms[$base_form . '_' . $nid]['callback'] = $base_form;
    }
  }
  return $forms;
}

/**
 * Implements hook_preprcess_node()
 */
function message_library_notices_preprocess_node(&$vars) {
  message_library_get_all_very_sensitive_messages();
  if ($vars['type'] == 'message') {
    $items =  field_get_items('node', $vars['node'],'field_message_sensitivity');
    $sensitivity = (int) $items['0']['value'];

    // For the message which is of type 'Sensitive' or 'Very sensitive'
    if ($sensitivity == 1 || $sensitivity == 2) {
      drupal_add_css(drupal_get_path('module', 'message_library_notices') . '/message_library_notices.css');

      $output = '';

      $items = field_get_items('node', $vars['node'],'field_message_sensitivity_messag');
      $sen_message = $items['0']['safe_value'];
      if (!empty($sen_message)) {
        // xxx: Move this to field settings
        $sen_message = strip_tags(html_entity_decode($sen_message));
        $output .= theme('message_library_notices_sensitivity_warning',array('message' => strip_tags($sen_message)));
      }

      // Very sensitive message also may have questions
      if ($sensitivity == 2) {
        $output .= theme('message_library_notices_sensitivity_questions', array('node' => $vars['node']));

        // The sensitive message can only be shown to the user if he/she has
        // confirmed all the questions listed.
        global $user;
        $vars['hide_very_sensitive_message'] = !message_library_notices_get_warning($vars['nid']);
      }

      if (!empty($output)) {
        // Wrapper it arround a div
        $classes = array('sensitivity-warning');
        ($sensitivity == 1) ? array_push($classes, 'sensitive') : array_push($classes, 'very-sensitive');
        $prefix = '<div ' . drupal_attributes(array('class' => $classes)) . '>';
        $suffix = '</div>';

        $output = $prefix . $output . $suffix;
      }
      $vars['sensitivity_warning'] = $output;
    }
  }
}

/**
 * Implements theme_hook()
 */
function theme_message_library_notices_sensitivity_warning($vars) {
  $output = '';
  $form['temp_el'] = array(
    '#prefix' => '<div class="sensitive-message">',
    '#markup' => !empty($vars['message']) ? $vars['message'] : '',
    '#suffix' => '</div>',
  );
  $output .= drupal_render($form);
  return $output;
}

/**
 * Form
 */
function message_library_notices_question_form($form, $form_stat, $node) {
  $form['questions_uid'] = array(
    '#type' => 'value',
    '#value' => $node->uid,
  );

  $form['message_nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  // Questions
  $question_items = field_get_items('node', $node,'field_message_sensitivity_questi');
  $questions = array();
  foreach ((array)$question_items as $key => $item) {
    // prevent from element with key 0 being as an option
    $questions['item_' . $key] = $item['safe_value'];
  }

  $form['sensitivity_questions'] = array(
    '#type' => 'checkboxes',
    '#options' => $questions,
  );

  $form['sensitivity_understood'] = array(
    '#type' => 'submit',
    '#value' => t('I understand'),
  );

  return $form;
}

/**
 * Validation handler for for #message_library_notices_question_form
 */
function message_library_notices_question_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  // Annoy the user, by letting him/her choose all the questions.
  if (!empty($values['sensitivity_questions'])) {
    if (array_search('0', $values['sensitivity_questions']) !== FALSE) {
      form_set_error('sensitivity_questions',t('You have to check all the fields.'));
    }
  }
}

/**
 * Submission handler for form #message_library_notices_question_form
 */
function message_library_notices_question_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if(!empty($values['message_nid'])) {
    message_library_notices_save_warning($values['message_nid']);
  }
}

/**
 * Implements template_preprocess_hook()
 */
function template_preprocess_message_library_notices_sensitivity_questions(&$vars) {
  $vars['question_form'] = drupal_get_form(
      'message_library_notices_question_form_' . $vars['node']->nid, $vars['node']);
}

/* CRUD functions
 * -------------------------------------------------------------------------- */

/**
 * Setter for a warning
 */
function message_library_notices_save_warning($nid) {
  if (user_is_logged_in()) {
    db_merge('message_library_notices_warning')
      ->key(array('messageid' => $nid, 'uid' => $GLOBALS['user']->uid))
      ->fields(array('messageid' => $nid, 'uid' => $GLOBALS['user']->uid))
      ->execute();
  }
  else {
    $_SESSION['iaa_notices_warning'][$nid] = TRUE;
  }
}

/**
 * Getter for a whether a user has understand all the risks of a very sensitive
 * message
 */
function message_library_notices_get_warning($nid) {
  if (user_is_logged_in()) {
    global $user;
    $result = db_select('message_library_notices_warning', 'w')
      ->fields('w', array('id'))
      ->condition('messageid', $nid)
      ->condition('uid', $user->uid)
      ->range(0, 1)
      ->execute()
      ->fetchCol();
  }
  else {
    $result = !empty($_SESSION['message_library_notices_warning'][$nid]) ?
      $_SESSION['message_library_notices_warning'][$nid] : FALSE;
  }
  return !empty($result) ? TRUE : FALSE;
}

/**
 * Enable the node template discovered by Drupal.
 * @see: http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 */
function message_library_notices_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'message_library_notices');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $hook) {
    _mymodule_insert_after_first_element($theme_registry[$hook]['theme paths'], $module_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 */
function _mymodule_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Check whether a user is allowed to view a specific message that's is very
 * sensitive.
 */
function message_library_notices_check_user_view_very_sensity_message($uid, $nid) {
  $result = db_query('SELECT id FROM {message_library_notices_warning} WHERE uid = :uid AND messageid = :nid', array(':uid' => $uid, ':nid' => $nid))->fetchField();
  return !empty($result) ? TRUE : FALSE;
}

/**
 * Get the nids of all the messages that are very sensitive.
 */
function message_library_get_all_very_sensitive_messages() {
  $nids = array();

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'message')
    ->fieldCondition('field_message_sensitivity', 'value', 2);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
  }
  return $nids;
}
