<?php
/**
 * @file
 * @see: [Drupal-to-Drupal data migration](http://drupal.org/sandbox/mikeryan/1234554)
 */
// Define the source database (D6 site)
define("SOURCE_DATABASE", 'infoasaidorg');

/**
 * Implementation of hook_migrate_api()
 */
function message_library_migrate_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_flush_caches().
 */
function message_library_flush_caches() {
  message_library_register_migrations();
}

/**
 * Register all D6->D7 migrations.
 */
function message_library_register_migrations() {
  /**
   * Each migration being registered takes an array of arguments, some required
   * and some optional. Start with the common arguments required by all
   * 1. 'source_connection' - connection key, set up in settings.php, pointing to
   * the Drupal 6 database
   * 2. 'source_version' - major version of Drupal
   *
   * For this to work, make sure you have the d6 databse and these lines in the
   * `settings.php`
   *
   * $databases['migration']['default'] = array(
   *   'driver' => 'mysql',
   *   'database' => 'infoasaidorg_d6_origin',
   *   'username' => 'root',
   *   'password' => 'root',
   *   'host' => 'localhost',
   *   'prefix' => '',
   * );
   */
  $common_arguments = array(
    'source_connection' => 'migration',
    'source_version' => 6,
  );
  /* Vocabulary Migration
   * ------------------------------------------------------------------------*/
  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments. Note that in Drupal 6 vocabularies did not have machine
  // names, so we use the vocabulary ID to uniquely identify them.
  $vocabulary_arguments = array(
    // ------- Message --------------------------
    // ------------------------------------------
    // At Risk Groups (vid - 2)
    array(
      'description' => t('Migration of term [At Risk Groups]'),
      'machine_name' => 'TermAtRiskGroups',
      'source_vocabulary' => '2',
      'destination_vocabulary' => 'at_risk_groups',
    ),

    // Target Audience (vid - 1)
    array(
      'description' => t('Migration of term [Target Audience]'),
      'machine_name' => 'TermTargetAudience',
      'source_vocabulary' => '1',
      'destination_vocabulary' => 'target_audience'
    ),

    // Information Type (vid - 14)
    array(
      'description' => t('Migration of term [Information Type]'),
      'machine_name' => 'TermInformationType',
      'source_vocabulary' => '14',
      'destination_vocabulary' => 'information_type'
    ),

    // ------- Threat ---------------------------
    // ------------------------------------------
    // Hazard (vid - 11)
    array(
      'description' => t('Migration of term [Hazard]'),
      'machine_name' => 'TermHazard',
      'source_vocabulary' => '11',
      'destination_vocabulary' => 'hazard'
    ),

    // Issues (vid - 12)
    array(
      'description' => t('Migration of term [Issues]'),
      'machine_name' => 'TermIssues',
      'source_vocabulary' => '12',
      'destination_vocabulary' => 'issues'
    ),

    // Sector (vid - 3)
    array(
      'description' => t('Migration of term [Sector]'),
      'machine_name' => 'TermSector',
      'source_vocabulary' => '3',
      'destination_vocabulary' => 'sector'
    ),
  );

  // Again, we're using the migrate_d2d class directly.
  // The soft dependency says that while we don't have to run the user migration
  // first, we want to make sure it's listed first so the vocubularies are
  // listed right ahead of the node migrations.
  $common_vocabulary_arguments = $common_arguments
      + array('class_name' => 'DrupalTerm6Migration');

  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration(
      $arguments['class_name'],
      $arguments['machine_name'],
      $arguments
    );
  }

  // Threat migration is from D6 CT to taxonmy
  Migration::registerMigration('InfoasaidThreatMigration', 'TermThreat');

  /* Content Migration
   * ------------------------------------------------------------------------*/
  // Node migrations - each has its own class derived from the migrate_d2d class,
  // specifying its particular field mappings and transformations. source_type
  // and destination_type are required arguments.
  $node_arguments = array(
    // Message
    array(
      'machine_name' => 'NodeMessageMigration',
      'class_name' => 'InfoasaidNodeMessageMigration',
      'description' => t('Migration of [Message] nodes from Drupal 6'),
      'source_type' => 'message',
      'destination_type' => 'message'
    ),

    // Threat is changed form a CT to taxonomy, and not here anymore.
  );

  // Tell the node migrations where the users are coming from, so they can
  // set up the dependency and resolve D6->D7 uids.
  $common_node_arguments = $common_arguments + array();
  foreach ($node_arguments as $arguments) {
    $arguments = array_merge_recursive($arguments, $common_node_arguments);
    Migration::registerMigration(
      $arguments['class_name'],
      $arguments['machine_name'],
      $arguments
    );
  }
}

/**
 * Integration for the content type - 'Message'
 *
 * To test this migration class use the following drush command and check debug
 * output in the terminal:
 *
 * @code
 *   drush migrate-rollback NodeMessageMigration; drush mi NodeMessageMigration
 * @endcode
 *
 */
class InfoasaidNodeMessageMigration extends DrupalNode6Migration {
  public function __construct(array $arguments) {
    parent::__construct($arguments);

    // ---- Term reference -----------------------------------------------------
    // At risk group
    $this->addFieldMapping('field_message_group_risk', 'field_message_group_risk')
         ->sourceMigration('TermAtRiskGroups')
         ->arguments(array('source_type' => 'tid'));

    // Target audience
    $this->addFieldMapping('field_message_audience', 'field_message_audience')
         ->sourceMigration('TermTargetAudience')
         ->arguments(array('source_type' => 'tid'));

    // Information type
    $this->addFieldMapping('field_message_info_type', 'field_message_info_type')
         ->sourceMigration('TermInformationType')
         ->arguments(array('source_type' => 'tid'));

    // Threat (node reference field => entityreference field)
    $this->addFieldMapping('field_message_threat', 'field_message_threat')
         ->sourceMigration('NodeThreatMigration');

    // Simple mappings
    $this->addSimpleMappings(array(
      'field_message_sensitivity',
      'field_message_group_mess',
      'field_message_sensitivity_messag',
      'field_message_sensitivity_questi',
      'field_message_sensitivity_causes',
      'field_message_target_comment',
      'field_message_group_risk_comment',
    ));

    // @todo: unset the body fields, because the message doesn't have a field
    // for that...

    // DNM destination
//     $this->addUnmigratedDestinations(array(
//       'body',
//       'body:summary',
//       'body:format',
//       'body:language'));

    // DNM source
    $this->addUnmigratedSources(array(
      'uid',
      '1',
      '2',
      '14',
      '17',
      'field_message_sensitivity_messag:format',
      'field_message_sensitivity_causes:format',
    ));
  }

  public function prepareRow($row) {
    parent::prepareRow($row);

    // Transform the sensitivity value
    // The sensitivity vocabulary was coverted to a simple list_integer field
    $sensitivity_map = array(
      '56' => 0, // Not sensitive
      '57' => 1, // Sensitive
      '58' => 2, // Very sensitive
    );
    $origin_val = $row->field_message_sensitivity;
    // It's a single value field
    $row->field_message_sensitivity =
      array_key_exists($origin_val, $sensitivity_map) ?
      array($sensitivity_map[$origin_val]) :
      array($sensitivity_map['56']);
  }

  // If the migration referenced in sourceMigration() implements a createStub()
  // method, which creates a dummy node and returns its ID, then if the lookup
  // of ref_id fails createStub will be called and the resulting node used to
  // fill in field_article_ref. Then, when article B finally runs through the
  // migration, the actual content of article B will replace the dummy data and
  // everything will be hunky-dory
  protected function createStub($migration, $source_id) {
    $node = new stdClass;
    $node->title = t('Stub for source messagee node of nid #%nid', array('%nid' => $source_id[0]));
    $node->body = t('Stub body for source message node of nid #%nid', array('%nid' => $source_id[0]));
    $node->type = $this->destination->getBundle();
    $node->uid = 1;
    $node->status = 0;
    $node->language = LANGUAGE_NONE;
    node_save($node);

    if (isset($node->nid)) {
      return array($node->nid);
    }
    else {
      return FALSE;
    }
  }
}


/**
 * Integration for the content type - 'Threat'
 *
 * To test this class using the following drush commands:
 * @code
 *   drush migrate-rollback NodeThreatMigration; drush mi NodeThreatMigration
 * @endcode
 */
class InfoasaidNodeThreatMigration extends DrupalNode6Migration {
  public function __construct(array $arguments) {
    parent::__construct($arguments);

    $this->addUnmigratedSources(array());

    // Issue
    $this->addFieldMapping('field_threat_category', 'field_threat_category')
         ->sourceMigration('TermIssues')
         ->arguments(array('source_type' => 'tid'));

    // Hazard
    $this->addFieldMapping('field_threat_hazard', 'field_threat_hazard')
         ->sourceMigration('TermHazard')
         ->arguments(array('source_type' => 'tid'));

    // Sector
    $this->addFieldMapping('field_threat_sector', 'field_threat_sector')
         ->sourceMigration('TermSector')
         ->arguments(array('source_type' => 'tid'));;

    // Message (node reference field => entityreference field)
    $this->addFieldMapping('field_threat_message', 'field_threat_message')
         ->sourceMigration('NodeMessageMigration');

    $this->addUnmigratedDestinations(array(
      'field_threat_hazard:source_type',
      'field_threat_hazard:create_term',
      'field_threat_hazard:ignore_case',
      'field_threat_category:source_type',
      'field_threat_category:create_term',
      'field_threat_category:ignore_case',
      'field_threat_sector:source_type',
      'field_threat_sector:create_term',
      'field_threat_sector:ignore_case',
    ));

    $this->addUnmigratedSources(array(
      'field_threat_rules',
      'uid',
      '3',
      '11',
      '12'
    ));
  }

  public function prepareRow($row) {
    parent::prepareRow($row);
    // Hanlde the message nodes, remove duplicate messages
    $row->field_threat_message = !empty($row->field_threat_message) ?
      array_unique($row->field_threat_message) : array();
  }

  protected function createStub($migration, $source_id) {
    $node = new stdClass;
    $node->title = t('Stub for source threat of nid #!nid', array('!nid' => $source_id[0]));
    $node->body = t('Stub body for threat message of nid #!nid', array('!nid' => $source_id[0]));
    $node->type = $this->destination->getBundle();
    $node->uid = 1;
    $node->status = 0;
    $node->language = LANGUAGE_NONE;
    node_save($node);

    if (isset($node->nid)) {
      return array($node->nid);
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Migration from D6's CT 'threat' to D7's taxonomy 'threat'
 */
class InfoasaidThreatMigration extends  Migration {
  /**
   * Translation from field names assigned when executing the query to our
   * subfield notation.
   *
   * @var array
   *  key: DB-compatible name (e.g., field_buy_link_title).
   *  value: Subfield notation (e.g., field_buy_link:title).
   */
  protected $fixFieldNames = array();

  /**
   * An array of available source fields, beyond those in the base query.
   * Derived classes should populate this before calling the parent
   * constructor.
   *
   * @var array
   */
  protected $sourceFields = array();


  public function __construct() {
    parent::__construct();

    // Source
    $query = $this->query();
    $this->sourceOptions['fix_field_names'] = $this->fixFieldNames;
    $query = $this->query('SELECT * FROM node');
    $this->source = new MigrateDrupal6SourceSQL($query, $this->sourceFields, NULL,
        $this->sourceOptions);

    // Destination

    // Map
    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'nid' => array('type' => 'int',
                       'unsigned' => TRUE,
                       'not null' => TRUE,
                       'description' => 'Source node ID',
                       'alias' => 'n',
                      ),
      ),
      MigrateDestinationNode::getKeySchema()
    );
  }

  /**
   * Query for basic node fields from Drupal 6.
   *
   * @return QueryConditionInterface
   */
  protected function query() {
    $query = Database::getConnection('default', $this->sourceConnection)
             ->select('node', 'n')
             ->fields('n', array('nid', 'vid', 'language', 'title',
                 'uid', 'status', 'created', 'changed', 'comment', 'promote',
                 'moderate', 'sticky', 'tnid', 'translate'))
             ->condition('type', $this->sourceType)
             ->orderBy('changed');
    $query->innerJoin('node_revisions', 'nr', 'n.vid=nr.vid');
    $query->fields('nr', array('body', 'teaser', 'format'));
    // Pick up simple CCK fields
    $cck_table = 'content_type_' . $this->sourceType;
    if (Database::getConnection('default', $this->sourceConnection)
          ->schema()->tableExists($cck_table)) {
      $query->leftJoin($cck_table, 'f', 'n.vid=f.vid');
      // The main column for the field should be rendered with
      // the field name, not the column name (e.g., field_foo rather
      // than field_foo_value).
      $field_info = $this->version->getSourceFieldInfo();
      foreach ($field_info as $field_name => $info) {
        if (isset($info['columns']) && !$info['multiple'] && $info['db_storage']) {
          $i = 0;
          foreach ($info['columns'] as $display_name => $column_name) {
            if ($i++ == 0) {
              $query->addField('f', $column_name, $field_name);
            }
            else {
              // The database API won't allow colons in column aliases, so we
              // will accept the default alias, and fix up the field names later.
              // Remember how to translate the field names.
              $clean_name = str_replace(':', '_', $display_name);
              $this->fixFieldNames[$clean_name] = $display_name;
              $query->addField('f', $column_name);
            }
          }
        }
      }
    }
    return $query;
  }

}
