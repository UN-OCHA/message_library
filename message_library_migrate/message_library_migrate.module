<?php
/**
 * @file
 * @see: [Drupal-to-Drupal data migration](http://drupal.org/sandbox/mikeryan/1234554)
 */
// Define the source database (D6 site)
define("SOURCE_DATABASE", 'infoasaidorg_d6_origin');

/**
 * Implementation of hook_migrate_api()
 */
function message_library_migrate_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_flush_caches().
 */
function message_library_flush_caches() {
  //message_library_register_migrations();
}

/**
 * Register all D6->D7 migrations.
 */
function message_library_register_migrations() {
  return false;
  /**
   * Each migration being registered takes an array of arguments, some required
   * and some optional. Start with the common arguments required by all
   * 1. 'source_connection' - connection key, set up in settings.php, pointing to
   * the Drupal 6 database
   * 2. 'source_version' - major version of Drupal
   *
   * For this to work, make sure you have the d6 databse and these lines in the
   * `settings.php`
   *
   * $databases['migration']['default'] = array(
   *   'driver' => 'mysql',
   *   'database' => 'infoasaidorg_d6_origin',
   *   'username' => 'root',
   *   'password' => 'root',
   *   'host' => 'localhost',
   *   'prefix' => '',
   * );
   */
  $common_arguments = array(
    'source_connection' => 'migration',
    'source_version' => 6,
  );
  /* Vocabulary Migration
   * ------------------------------------------------------------------------*/
  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments. Note that in Drupal 6 vocabularies did not have machine
  // names, so we use the vocabulary ID to uniquely identify them.
  $vocabulary_arguments = array(
    // ------- Message --------------------------
    // ------------------------------------------
    // At Risk Groups (vid - 2)
    array(
      'description' => t('Migration of term [At Risk Groups]'),
      'machine_name' => 'TermAtRiskGroups',
      'source_vocabulary' => '2',
      'destination_vocabulary' => 'at_risk_groups',
    ),

    // Target Audience (vid - 1)
    array(
      'description' => t('Migration of term [Target Audience]'),
      'machine_name' => 'TermTargetAudience',
      'source_vocabulary' => '1',
      'destination_vocabulary' => 'target_audience'
    ),

    // Information Type (vid - 14)
    array(
      'description' => t('Migration of term [Information Type]'),
      'machine_name' => 'TermInformationType',
      'source_vocabulary' => '14',
      'destination_vocabulary' => 'information_type'
    ),

    // ------- Threat ---------------------------
    // ------------------------------------------
    // Hazard (vid - 11)
    array(
      'description' => t('Migration of term [Hazard]'),
      'machine_name' => 'TermHazard',
      'source_vocabulary' => '11',
      'destination_vocabulary' => 'hazard'
    ),

    // Issues (vid - 12)
    array(
      'description' => t('Migration of term [Issues]'),
      'machine_name' => 'TermIssues',
      'source_vocabulary' => '12',
      'destination_vocabulary' => 'issues'
    ),

    // Sector (vid - 3)
    array(
      'description' => t('Migration of term [Sector]'),
      'machine_name' => 'TermSector',
      'source_vocabulary' => '3',
      'destination_vocabulary' => 'sector'
    )
  );

  // Again, we're using the migrate_d2d class directly.
  // The soft dependency says that while we don't have to run the user migration
  // first, we want to make sure it's listed first so the vocubularies are
  // listed right ahead of the node migrations.
  $common_vocabulary_arguments = $common_arguments
      + array('class_name' => 'DrupalTerm6Migration');

  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration(
      $arguments['class_name'],
      $arguments['machine_name'],
      $arguments
    );
  }


  /* Content Migration
   * ------------------------------------------------------------------------*/
  // Node migrations - each has its own class derived from the migrate_d2d class,
  // specifying its particular field mappings and transformations. source_type
  // and destination_type are required arguments.
  $node_arguments = array(
    // Message
    array(
      'machine_name' => 'NodeMessageMigration',
      'class_name' => 'InfoasaidNodeMessageMigration',
      'description' => t('Migration of [Message] nodes from Drupal 6'),
      'source_type' => 'message',
      'destination_type' => 'message'
    )
  );

  // Tell the node migrations where the users are coming from, so they can
  // set up the dependency and resolve D6->D7 uids.
  $common_node_arguments = $common_arguments + array();
  foreach ($node_arguments as $arguments) {
    $arguments = array_merge_recursive($arguments, $common_node_arguments);
    Migration::registerMigration(
      $arguments['class_name'],
      $arguments['machine_name'],
      $arguments
    );
  }
}

/**
 * Integration for the content type - 'Message'
 */
class InfoasaidNodeMessageMigration extends DrupalNode6Migration {
  public function __construct(array $arguments) {
    parent::__construct($arguments);

    // ---- Term reference -----------------------------------------------------
    // At risk group
    $this->addFieldMapping('field_message_group_risk', 'field_message_group_risk')
         ->sourceMigration('TermAtRiskGroups')
         ->arguments(array('source_type' => 'tid'));

    // Target audience
    $this->addFieldMapping('field_message_audience', 'field_message_audience')
         ->sourceMigration('TermTargetAudience')
         ->arguments(array('source_type' => 'tid'));


    // Information type
    $this->addFieldMapping('field_message_info_type', 'field_message_info_type')
         ->sourceMigration('TermInformationType')
         ->arguments(array('source_type' => 'tid'));

    // Simple mappings
    $this->addSimpleMappings(array(
      'field_message_sensitivity',
      'field_message_group_mess',
      'field_message_sensitivity_messag',
      'field_message_sensitivity_questi',
      'field_message_sensitivity_causes',
      'field_message_target_comment',
      'field_message_group_risk_comment',
    ));

    // ---- Text field ---------------------------------------------------------
    // ---- Link field ---------------------------------------------------------

    // DNM destination
//     $this->addUnmigratedDestinations(array(
//       'body',
//       'body:summary',
//       'body:format',
//       'body:language'));

    // DNM source
    $this->addUnmigratedSources(array(
      'uid',
      '1',
      '2',
      '14',
      '17',
    ));
  }

  public function prepareRow($row) {
    parent::prepareRow($row);

    // Transform the sensitivity value
    // The sensitivity vocabulary was coverted to a simple list_integer field
    $sensitivity_map = array(
      // Not sensitive
      '56' => 0,
      // Sensitive
      '57' => 1,
      // Very sensitive
      '58' => 2,
    );
    $origin_val = $row->field_message_sensitivity;
    // It's a single value field
    $row->field_message_sensitivity =
      array_key_exists($origin_val, $sensitivity_map) ?
      array($sensitivity_map[$origin_val]) :
      array($sensitivity_map['56']);

    // Process 'At risk group'

    // Process 'Target audience'

    // Process 'Information type'

  }

  public function prepare($entity, $row) {
  }
}
