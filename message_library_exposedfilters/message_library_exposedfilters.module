<?php

/**
 * Implements hook_views_api()
 */
function message_library_exposedfilters_views_api() {
  $path = drupal_get_path('module', 'message_library_exposedfilters');
  return array(
    'api' => 3,
    'template path' => $path. '/templates',
  );
}

/**
 * Implements hook_flush_caches()
 */
function message_library_exposedfilters_flush_caches() {
  message_library_exposedfilters_get_issue_threats(true);
}

/**
 * Implements hook_theme()
 */
function message_library_exposedfilters_theme($existing, $type, $theme, $path) {
  return array(
    'current_selected_criteria' => array(
      'template' => 'templates/message_library_exposedfilters_current_selected_criteria',
    ),
  );
}

/**
 * Preprocess variables for page.tpl.php
 */
function message_library_exposedfilters_preprocess_page(&$variables) {
  if (empty($variables['title_suffix'])) {
    $variables['title_suffix'] = array();
  }

  $variables['title_suffix']['message_library_theme'] = array();
}


/**
 * Implements hook_viws_pre_render()
 */
function message_library_exposedfilters_views_pre_render(&$view) {
  // This will prepend a 'Currently Selected Criteria' section to the views
  // Message Library's result
  if ($view->name != 'message_library') return;
  if (empty($view->exposed_input)) return;

  $vars = array();
  foreach($view->exposed_input as $key => $val) {
    switch ($key) {
      // 1. Text field, as assign it is
      case 'ml_search_text':
        if ($val == 'enter search terms') {
          $vars[$key] = '';
        }
        else {
          $vars[$key] = !empty($val) ? $val : '';
        }
        break;
      // 2. For vocabularies, load and assign term name
      case 'issue':
      case 'at_risk_group':
      case 'target_audience':
      case 'threat':
        if ((int) $val) { // option 'All' will be cast to 0 and ignored
          $term = taxonomy_term_load($val);
          if ($term) {
            $vars[$key] = $term->name;
          }
        }
        else {
          $vars[$key] = '';
        }
        break;
    }
  }

  // Add a summary text like '800 records matched criteria.', just as the one
  // displayed in the footer
  $vars['total_rows'] = !empty($view->total_rows) ? $view->total_rows : 0;
  $vars['total_rows_text'] = t('<strong>@count</strong> records matched criteria.',
      array('@count' => $vars['total_rows']));

  $view->attachment_before .= theme('current_selected_criteria', $vars);
}

/**
 * Implements hook_views_pre_build()
 */
function message_library_exposedfilters_views_pre_build(view &$view) {
  if ($view->name != 'message_library') return;
  $input = $view->get_exposed_input();

  // this handles the sinario when the user select a sector term, and then
  // switch to the 'Alphabetically' display mode, there will be a illegal option
  // error.
  if (isset($input['iss_mode']) && $input['iss_mode'] == '0' && !empty($input['issue']) && $input['issue'] != 'All') {
    if (($term = taxonomy_term_load($input['issue'])) && $term->vocabulary_machine_name != 'issues') {
      $input['issue'] = 'All';
    }
  }
  // when the user changes the issues, we need to reset the option of threat to prevent illegal option.
  if (!empty($input['issue']) && !empty($input['threat']) && $input['issue'] != 'All' && $input['threat'] != 'All') {
    $threats = message_library_exposedfilters_get_issue_threats();
    $trt_tid = $input['threat'];
    $iss_tid = $input['issue'];
    if ($threats && isset($threats[$iss_tid]) && !isset($threats[$iss_tid][$trt_tid])) {
      $input['threat'] = 'All';
    }
  }
  // prevent the user submit the placeholder's content
  if (!empty($input['ml_search_text'])) {
    $s_text = trim($input['ml_search_text']);
    if ($s_text == 'enter search terms') {
      $s_text = '';
    }
    $input['ml_search_text'] = $s_text;
  }

  $view->set_exposed_input($input);
}

/**
 * Implements hook_preprocess_THEMENAME()
 */
function message_library_exposedfilters_preprocess_current_selected_criteria(&$vars) {
  // Check if there isn't any search criteria specified
  $vars['has_criteria'] = FALSE;

  $check_keys = array(
    'ml_search_text',
    'issue',
    'at_risk_group',
    'target_audience',
    'threat'
  );

  foreach($check_keys as $key) {
    if (!empty($vars[$key])) {
      $vars['has_criteria'] = TRUE;
      break;
    }
  }

  // Add help box
  $box = module_invoke('boxes', 'block_view', 'ml_help_criteria');
  $vars['ml_help_criteria'] = $box['content'];
}

/**
 * Implements hook_form_alter()
 */
function message_library_exposedfilters_form_views_exposed_form_alter(&$form, &$form_state) {

  if(!empty($form_state['view']) && $form_state['view']->name == 'message_library') {
    if (!empty($form['target_audience']['#options'])) {
      $form['target_audience']['#options']['All'] = t('<Any target audience>');
    }
    if (!empty($form['at_risk_group']['#options'])) {
      $form['at_risk_group']['#options']['All'] = t('<Any group>');
    }
    if (!empty($form['issue']['#options'])) {
      $form['issue']['#options']['All'] = t('<All issues>');
    }

    $form['ml_search_text']['#attributes'] = array('class' => array('ctools-auto-submit-exclude'));

    $path = drupal_get_path('module', 'message_library_exposedfilters');
    $form['#attached']['js'][]  = $path . '/message_library_exposedfilters.js';
    $form['#attached']['css'][] = $path . '/message_library_exposedfilters.css';
    // Note: use `dpm(drupal_get_library('system'));` to check what libraries
    // are available.
    $form['#attached']['library'][]  = array('system', 'drupal.collapse');
  }
}

/**
 * Get a list of threats grouped by issue.
 */
function message_library_exposedfilters_get_issue_threats($reset = false) {
  $result = variable_get('ml_issue_threats', array());
  if (!empty($result) && !$reset) {
    return $result;
  }
  else {
    $result = array();
    $threat_vocab = taxonomy_vocabulary_machine_name_load('threat');
    $threat_terms = taxonomy_get_tree($threat_vocab->vid, 0, 1, true);
    foreach ($threat_terms as $term) {
      if (empty($term->field_threat_category)) {
        continue;
      }
      $items = field_get_items('taxonomy_term', $term, 'field_threat_category');
      foreach($items as $v) {
        if (empty($v['tid'])) continue;
        if (!isset($result[$v['tid']])) {
          $result[$v['tid']] = array();
        }
        if (in_array($term->tid, $result[$v['tid']])) continue;
        $result[$v['tid']][$term->tid] = $term->name;
      }
    }

    if ($result) {
      variable_set('ml_issue_threats', $result);
    }
    return $result;
  }
}

/**
 * Implements MODULENAME_preprocess_hook()
 */
function message_library_exposedfilters_preprocess_views_exposed_form(&$vars) {
  $form = $vars['form'];
  if ($form['#id'] == 'views-exposed-form-message-library-search-page') {
    // If there are values set in the 'Advanced search', then don't set the
    // default collapsed status
    $vars['advanced_search_collapsed'] = TRUE;

    $advanced_widgets = array(
        'issue',
        'threat',
        'at_risk_group',
        'target_audience',
    );

    foreach ($advanced_widgets as $widget_name) {
      $value = $form[$widget_name]['#value'];
      $type = $form[$widget_name]['#type'];

      if (($type == 'select' && strtolower($value) !== 'all') ||
      ($type == 'text' && !empty($value))) {
        $vars['advanced_search_collapsed'] = FALSE;
        continue;
      }
    }
  }
}

/**
 * Implements hook_textformatter_field_info()
 */
function message_library_exposedfilters_textformatter_field_info() {
  $info = array();
  $info['link'] = array(
      'fields' => array('link_field'),
      // Callback to process $items from hook_field_formatter_view.
      'callback' => 'message_library_theme_link_field_create_list',
  );
  return $info;
}

/**
 * Create list for link fields
 */
function message_library_exposedfilters_link_field_create_list($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $list_items = array();

  if (!empty($items)) {
    $count = count($items);

    $i = 1;
    foreach ($items as $delta => $item) {
      $pre_num = ($count > 1) ? '<span class="entry-num">' . $i . '. </span>' : '';
      $list_items[] = $pre_num . theme('link_formatter_link_default', array('element' => $item));
      $i++;
    }
  }
  return $list_items;
}

