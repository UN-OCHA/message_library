<?php

/**
 * Implements hook_theme()
 */
function message_library_exposedfilters_theme($existing, $type, $theme, $path) {
  return array(
    'current_selected_criteria' => array(
      'template' => 'templates/message_library_exposedfilters_current_selected_criteria',
    ),
    'issues_options_display_mode_switcher' => array(
      'template' =>  'templates/issues_options_display_mode_switcher',
    )
  );
}

/**
 * Implements hook_views_pre_render()
 */
function message_library_exposedfilters_views_pre_render(&$view) {
  // This will prepend a 'Currently Selected Criteria' section to the views
  // Message Library's result
  if ($view->name != 'message_library') return;
  if (empty($view->exposed_input)) return;

  $vars = array();
  foreach($view->exposed_input as $key => $val) {
    switch ($key) {
      // 1. Text field, as assign it is
      case 'ml_search_text':
        $vars[$key] = !empty($val) ? $val : '';
        break;
      // 2. For vocabularies, load and assign term name
      case 'issue':
      case 'at_risk_group':
      case 'target_audience':
      case 'threat':
        if ((int) $val) { // option 'All' will be cast to 0 and ignored
          $term = taxonomy_term_load($val);
          $vars[$key] = $term->name;
        }
        else {
          $vars[$key] = '';
        }
        break;
    }
  }

  // Add a summary text like '800 records matched criteria.', just as the one
  // displayed in the footer
  $vars['total_rows'] = !empty($view->total_rows) ? $view->total_rows : 0;
  $vars['total_rows_text'] = t('<strong>@count</strong> records matched criteria.',
      array('@count' => $vars['total_rows']));

  // Add the inline help for the search criteria
  if (module_exists('message_library_help')) {
    $vars['search_criteria_help'] = message_library_help_generate('ml_view_counter');
  }

  $view->attachment_before .= theme('current_selected_criteria', $vars);
}

/**
 * Implements hook_preprocess_THEMENAME()
 */
function message_library_exposedfilters_preprocess_current_selected_criteria(&$vars) {
  // Check if there isn't any search criteria specified
  $vars['has_criteria'] = FALSE;

  $check_keys = array(
    'ml_search_text',
    'issue',
    'at_risk_group',
    'target_audience',
    'threat'
  );

  foreach($check_keys as $key) {
    if (!empty($vars[$key])) {
      $vars['has_criteria'] = TRUE;
      break;
    }
  }
}

/**
 * Implements hook_form_alter()
 */
function message_library_exposedfilters_form_views_exposed_form_alter(&$form, &$form_state) {
  // For the search field in the exposed widget for views 'message_library',
  // implement the HTML 5 input placehodler feature.
  if ($form['#id'] !== 'views-exposed-form-message-library-search-page') return;

  $form['ml_search_text']['#attributes']['placeholder'] = t('enter search terms');
  // Add necessary js and css files
  $path = drupal_get_path('module', 'message_library_exposedfilters');
  $form['#attached']['js'][]  = $path . '/message_library_exposedfilters.js';
  $form['#attached']['css'][] = $path . '/message_library_exposedfilters.css';

  $nested_terms = _taxonomy_get_nested_terms('issues');

  // Get all the outter terms and sort alphabetically
  $alpha_list_terms = _get_issues_outter_terms($nested_terms);
  // asort() is good because the index(tid) will be preserved.
  asort($alpha_list_terms);

  $nested_issue_terms = _get_issues_nested_terms('issues');

  // Prepare two set of select options, for the exposed filter of 'Issues'
  // - 'Sectors' : A nested list
  $form['issue']['#prefix'] = theme('issues_options_display_mode_switcher');

  $form['edit-issue-nested'] = array(
    '#type' => 'select',
    '#id' => array('edit-issue-nested'),
    '#options' => $nested_issue_terms,
    '#attributes' => array('style' => 'display:none'),
  );

  // - 'Alphabetically' : A flat list, in alphabetical order
  $form['edit-issue-alpha'] = array(
    '#type' => 'select',
    '#id' => array('edit-issue-alpha'),
    '#options' => $alpha_list_terms,
    '#attributes' => array('style' => 'display:none'),
  );
}

/*----------------- HELPER FUNCTIONS
 *----------------------------------------------------------------------------*/

/**
 * Get all the terms arranged in the order of depth.s
 */
function _taxonomy_get_nested_terms($v_machine_name) {
  $vocab_obj = taxonomy_vocabulary_machine_name_load((string) $v_machine_name);
  if (empty($vocab_obj->vid)) return;

  $terms = taxonomy_get_tree($vocab_obj->vid);

  // Adapted from an answer on stackoverflow
  // @see: http://stackoverflow.com/questions/7046364/php-building-recursive-array-from-list
  $children = $nested_terms = array();
  foreach($terms as $term){
    foreach ($term->parents as $parent) {
      $children[$parent] = !isset($children[$parent]) ? array() : $children[$parent];
      $children[$parent][$term->tid] = array('id' => $term->tid,'name' => $term->name);
    }
  }
  $nested_terms = _recursive_append_children($children[0], $children);

  return $nested_terms;
}


/**
 * Callback, sort by term's depth.
 */
function _term_depth_sort($a, $b) {
  return $a->depth - $b->depth;
}


/**
 * Callback, to organize the array into a hierachical structure.
 */
function _recursive_append_children($arr, $children){
  foreach($arr as $key => $item) {
    if(isset($children[$key])) {
      $arr[$key]['children'] = _recursive_append_children($children[$key], $children);
    }
  }
  return $arr;
}


/**
 * Prepare a array that can be processed by theme_select()
 */
function _get_issues_nested_terms($v_name) {
  $vocab_obj = taxonomy_vocabulary_machine_name_load((string) $v_name);
  if (empty($vocab_obj->vid)) return;

  // We want to display only the terms in 2nd and 3rd levels
  $parent_tid = _get_issues_top_level_tid($v_name);
  $tree = taxonomy_get_tree($vocab_obj->vid, $parent_tid);

  $options = array();

  if ($tree) {
    foreach ($tree as $term) {
      $entity = taxonomy_term_load($term->tid);
      $options[$term->tid] = str_repeat('-', $term->depth) . ' ' . $term->name;
    }
  }
  // This can append element and maintain index at the same time
  $options = array('All' => '<All issues>') + $options;
  return $options;
}


/**
 * Get the outter most terms, which has no parent
 * This list can be directly used by 'theme_select'
 */
function _get_issues_outter_terms($arr) {
  $elements = array();

  foreach($arr as $key => $child) {
    if(isset($child['children']) && !empty($child['children'])) {
      $elements += _get_issues_outter_terms($child['children']);
    }
    else {
      $elements[$child['id']] = $child['name'];
    }
  }

  $elements = array('All' => '<All issues>') + $elements;
  return $elements;
}


/**
 * Get the tid of the top term in vocabulary 'Issues', for the moment there is
 * only one top term 'Sectors', this is used to help specify the parent tid for
 * function 'taxonomy_get_tree'
 */
function _get_issues_top_level_tid($v_name) {
  $query = db_select('taxonomy_term_data', 'td');
  $query->addField('td', 'tid');
  $query->innerJoin('taxonomy_vocabulary', 'tv', 'tv.vid = td.vid');
  $query->innerJoin('taxonomy_term_hierarchy', 'th', 'th.tid = td.tid');
  $query->condition('tv.machine_name', $v_name, '=');
  $query->condition('th.parent', 0, '=');
  $result = $query->execute()->fetchCol();
  return reset($result);
}

